<%@ jet imports="org.archstudio.myx.fw.* \
	org.archstudio.myxgen.* \
	org.archstudio.myxgen.jet.codegen.* \
	org.archstudio.myxgen.jet.util.* \
	org.archstudio.sysutils.*"%>
<java:merge/>
<%
	MyxGenBrick brick = (MyxGenBrick)context.getVariable(MyxGenBrick.class.getName());
	String packageName = TextUtil.getPackagePart(brick.getStubClassName());
	String className = TextUtil.getClassPart(brick.getStubClassName());
%>
package <%=packageName%>;

import java.lang.reflect.*;
import java.util.*;
import java.util.concurrent.*;
import org.archstudio.myx.fw.*;
<%for(String javaImport : MyxCompStubUtil.getImports(brick)) {%>
import <%=javaImport%>;
<%}%>

/**
 * Abstract Myx brick: "<%=brick.getName()%>"
<%if(brick.getDescription() != null){%>
 * <p><%=brick.getDescription()%>
<%}%>
 *
 * @generated
 */
@SuppressWarnings("unused")
/* package */ abstract class <%=className%>
	<%=MyxCompStubUtil.getExtendsClause(brick)%>
    <%=MyxCompStubUtil.getImplementsClause(brick)%> {

<%if(brick.getParentBrickId() == null){%>
	/**
	 * @generated
	 */
	protected final MyxRegistry myxRegistry = MyxRegistry.getSharedInstance();
	
	/**
	 * @generated
	 */
	public void begin(){
		super.begin();
		myxRegistry.register(this);
	}
	/**
	 * @generated
	 */
	public void end(){
		myxRegistry.unregister(this);
		super.end();
	}
<%}%>

<% // ----- constant myx interface name declarations %>

<%for(MyxGenInterface iface : brick.getInterfaces()) {%>
	<%//EServiceObjectDelegate delegate = iface.getServiceObjectDelegate();%>		
	/**
	 * Myx name for the <code><%=iface.getName()%></code> interface.
	<%if(iface.getDescription() != null){%>
	 * <p><%=iface.getDescription()%>
	<%}%>
	 *
	 * @generated
	 */
	// <%=iface%>
	public static final IMyxName <%=MyxCompStubUtil.getConstantName(iface)%> = MyxUtils.createName("<%=iface.getId()%>");
<%}%>

<% // ----- myx service object declarations %>

<%for(MyxGenInterface iface : brick.getInterfaces()) {%>
	<%EServiceObjectDelegate delegate = iface.getServiceObjectDelegate();%>		
	<%if(delegate.isNeedsVariable()){%>
	/**
	 * Service object(s) for the <%=iface.getName()%> interface.
	 *
	 * @see #<%=MyxCompStubUtil.getConstantName(iface)%>
	 * @generated
	 */
		<%if(iface.isSingle()){%>
	protected <%=iface.getClassName()%> <%=MyxCompStubUtil.getServiceObjectName(iface)%> = null;
	 	<%}else{%>
	protected final Collection<<%=iface.getClassName()%>> <%=MyxCompStubUtil.getServiceObjectName(iface)%>
			= new CopyOnWriteArrayList<<%=iface.getClassName()%>>();
		<%}%>
	<%}%>
	<%if(delegate.isNeedsProxy()){%>
	/**
	 * Service object proxy for the <%=iface.getName()%> interface.
	 * Calls to the proxy object are automatically delegated to all service objects of this interface.
	 *
	 * @see #<%=MyxCompStubUtil.getConstantName(iface)%>
	 * @generated
	 */
	protected final <%=iface.getClassName()%> <%=MyxCompStubUtil.getServiceObjectName(iface)%>Proxy =
			(<%=iface.getClassName()%>) Proxy.newProxyInstance(
				<%=iface.getClassName()%>.class.getClassLoader(),
				new Class[] { <%=iface.getClassName()%>.class },
				new InvocationHandler() {
					@Override
					public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		<%if(delegate == EServiceObjectDelegate.myxRegistry){%>
						for (<%=iface.getClassName()%> o : myxRegistry.getObjects(<%=className%>.this, <%=iface.getClassName()%>.class)) {
		<%}else if(!iface.isSingle()){%>
						for (<%=iface.getClassName()%> o : <%=MyxCompStubUtil.getServiceObjectName(iface)%>) {
		<%}else{%>
						<%=iface.getClassName()%> o = <%=MyxCompStubUtil.getServiceObjectName(iface)%>;
						if(o != null) {
		<%}%>
							try {
								method.invoke(o, args);
							}
							catch (Exception e) {
								e.printStackTrace();
							}
						}
						return null;
					}
				});
	<%}%>
<%}%>

<% // ----- myx service object getters %>

<%for(MyxGenInterface iface : brick.getInterfaces()) {%>
	<%EServiceObjectDelegate delegate = iface.getServiceObjectDelegate();%>		
	<%if(iface.isGenerateGetter()){%>
	/**
	 * Returns the service object(s) for the <code><%=iface.getName()%></code> interface.
	 *
	 * @see #<%=MyxCompStubUtil.getConstantName(iface)%>
	 * @generated
	 */
		<%switch(delegate){%>
		<%case variable:%> 
		<%case events:%>
			<%if(iface.isSingle()){%>
	public <%=iface.getClassName()%> get<%=SystemUtils.capFirst(MyxCompStubUtil.getServiceObjectName(iface))%>(){
		return <%=MyxCompStubUtil.getServiceObjectName(iface)%>;
	}
			<%}else{%>
	public Collection<<%=iface.getClassName()%>> get<%=SystemUtils.capFirst(MyxCompStubUtil.getServiceObjectName(iface))%>(){
		return <%=MyxCompStubUtil.getServiceObjectName(iface)%>;
	}
				<%if(delegate.isNeedsProxy()){%>
	/**
	 * Returns the proxy service object for the <code><%=iface.getName()%></code> interface.
 	 *
 	 * @see #<%=iface.getClassName()%> <%=MyxCompStubUtil.getServiceObjectName(iface)%>Proxy
	 * @see #<%=MyxCompStubUtil.getConstantName(iface)%>
	 * @generated
	 */
	public <%=iface.getClassName()%> get<%=SystemUtils.capFirst(MyxCompStubUtil.getServiceObjectName(iface))%>Proxy(){
		return <%=MyxCompStubUtil.getServiceObjectName(iface)%>Proxy;
	}
				<%}%>
			<%}%>
		<%break;%> 
		<%case brick:%> 
	public <%=iface.getClassName()%> get<%=SystemUtils.capFirst(MyxCompStubUtil.getServiceObjectName(iface))%>(){
		return this;
	}
		<%break;%> 
		<%}%>
	<%}%>
<%}%>

<% // ----- myx service object and connection handlers %>

/**
 * @generated
 */
	@Override
	public void interfaceConnected(IMyxName interfaceName, Object serviceObject) {
		if(serviceObject == null){
			throw new NullPointerException(interfaceName.getName());
		}
<%for(MyxGenInterface iface : brick.getInterfaces()) {%>
	<%EServiceObjectDelegate delegate = iface.getServiceObjectDelegate();%>		
	<%if(iface.getDirection() == EMyxInterfaceDirection.OUT){%>
		if(interfaceName.equals(<%=MyxCompStubUtil.getConstantName(iface)%>)){
		<%switch(delegate){%>
		<%case variable:%>
		<%case events:%>
			<%if(iface.isSingle()){%>
				if(<%=MyxCompStubUtil.getServiceObjectName(iface)%> != null){
					throw new IllegalStateException("Only a single connection is supported on "+interfaceName);
				}
				<%=MyxCompStubUtil.getServiceObjectName(iface)%> = (<%=iface.getClassName()%>) serviceObject;
				return;
			<%}else{%>
				<%=MyxCompStubUtil.getServiceObjectName(iface)%>.add((<%=iface.getClassName()%>) serviceObject);
				return;
			<%}%>
		<%break;%> 
		<%}%>
		}
	<%}%>
<%}%>
<%if(brick.getParentBrickId() != null){%>
		super.interfaceConnected(interfaceName, serviceObject);
<%}else{%>
		throw new IllegalArgumentException("Unhandled interface connection: "+interfaceName);
<%}%>
	}

/**
 * @generated
 */
	@Override
	public void interfaceDisconnecting(IMyxName interfaceName, Object serviceObject) {
		if(serviceObject == null){
			throw new NullPointerException(interfaceName.getName());
		}
<%for(MyxGenInterface iface : brick.getInterfaces()) {%>
	<%EServiceObjectDelegate delegate = iface.getServiceObjectDelegate();%>		
	<%if(iface.getDirection() == EMyxInterfaceDirection.OUT){%>
			if(interfaceName.equals(<%=MyxCompStubUtil.getConstantName(iface)%>)){
		<%switch(delegate){%>
		<%case variable:%>
		<%case events:%>
			<%if(iface.isSingle()){%>
				<%=MyxCompStubUtil.getServiceObjectName(iface)%> = null;
				return;
			<%}else{%>
				<%=MyxCompStubUtil.getServiceObjectName(iface)%>.remove(serviceObject);
				return;
			<%}%>
		<%break;%> 
		<%case brick:%>
		<%break;%>
		<%}%>
		}
	<%}%>
<%}%>
<%if(brick.getParentBrickId() != null){%>
		super.interfaceDisconnecting(interfaceName, serviceObject);
<%}else{%>
		throw new IllegalArgumentException("Unhandled interface disconnection: "+interfaceName);
<%}%>
	}

/**
 * @generated
 */
	@Override
	public void interfaceDisconnected(IMyxName interfaceName, Object serviceObject) {
<%if(brick.getParentBrickId() != null){%>
		super.interfaceDisconnected(interfaceName, serviceObject);
<%}%>
	}
/**
 * @generated
 */
	@Override
	public Object getServiceObject(IMyxName interfaceName) {
<%for(MyxGenInterface iface : brick.getInterfaces()) {%>
	<%EServiceObjectDelegate delegate = iface.getServiceObjectDelegate();%>		
	<%if(iface.getDirection() == EMyxInterfaceDirection.IN){%>
		if(interfaceName.equals(<%=MyxCompStubUtil.getConstantName(iface)%>)){
		<%switch(delegate){%>
		<%case variable:%>
		<%case events:%>
		<%case myxRegistry:%>
			<%if(delegate.isNeedsProxy()){%>
			return <%=MyxCompStubUtil.getServiceObjectName(iface)%>Proxy;
			<%}else if(iface.isSingle()){%>
			if(<%=MyxCompStubUtil.getServiceObjectName(iface)%> == null){
				throw new NullPointerException("<%=MyxCompStubUtil.getServiceObjectName(iface)%>");
			}
			return <%=MyxCompStubUtil.getServiceObjectName(iface)%>;
			<%}%>
		<%break;%> 
		<%case brick:%>
			return this;
		<%break;%>
		<%}%>
		}
	<%}%>
<%}%>
<%if(brick.getParentBrickId() != null){%>
		return super.getServiceObject(interfaceName);
<%}else{%>
		throw new IllegalArgumentException("Unhandled interface service object: "+interfaceName);
<%}%>
	}
}