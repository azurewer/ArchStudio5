package org.archstudio.bna.things.shapes;

import org.archstudio.bna.IBNAView;
import org.archstudio.bna.ICoordinateMapper;
import org.archstudio.bna.IThingPeer;
import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;

/*
 * DO NOT EDIT THIS FILE, it is automatically generated. ANY MODIFICATIONS WILL BE OVERWRITTEN.
 *
 * To modify, update the thingdefinition extension at
 * org.archstudio.bna/Package[name=org.archstudio.bna.things.shapes]/Thing[name=Mapping].
 */

@SuppressWarnings("all")
@NonNullByDefault
public abstract class MappingThingBase extends org.archstudio.bna.things.AbstractThing
    implements org.archstudio.bna.IThing, org.archstudio.bna.facets.IHasMutableAnchorPoint,
    org.archstudio.bna.facets.IHasMutableGlow,
    org.archstudio.bna.facets.IHasMutableInternalWorldPoint,
    org.archstudio.bna.facets.IHasMutableLineData, org.archstudio.bna.facets.IHasMutableSelected {
  public MappingThingBase(@Nullable Object id) {
    super(id);
  }

  @Override
  public IThingPeer<? extends MappingThing> createPeer(IBNAView view, ICoordinateMapper cm) {
    return new MappingThingPeer<>((MappingThing) this, view, cm);
  }

  @Override
  protected void initProperties() {
    initProperty(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY,
        new java.awt.geom.Point2D.Double(0, 0));
    addShapeModifyingKey(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY);
    initProperty(org.archstudio.bna.facets.IHasEdgeColor.EDGE_COLOR_KEY,
        new org.eclipse.swt.graphics.RGB(0, 0, 0));
    initProperty(org.archstudio.bna.facets.IHasGlow.GLOW_ALPHA_KEY, 0.75d);
    initProperty(org.archstudio.bna.facets.IHasGlow.GLOW_COLOR_KEY, null);
    initProperty(org.archstudio.bna.facets.IHasGlow.GLOW_WIDTH_KEY, 20);
    initProperty(org.archstudio.bna.facets.IHasInternalWorldPoint.INTERNAL_POINT_KEY,
        new java.awt.geom.Point2D.Double(0, 0));
    initProperty(org.archstudio.bna.facets.IHasLineStyle.LINE_STYLE_KEY,
        org.archstudio.swtutils.constants.LineStyle.SOLID);
    initProperty(org.archstudio.bna.facets.IHasLineWidth.LINE_WIDTH_KEY, 1);
    initProperty(org.archstudio.bna.facets.IHasRotatingOffset.ROTATING_OFFSET_KEY, 0);
    initProperty(org.archstudio.bna.facets.IHasSelected.SELECTED_KEY, false);
    initProperty(org.archstudio.bna.facets.IHasInternalWorldPoint.INTERNAL_WORLD_KEY, null);
    super.initProperties();
  }

  @Override
  public java.awt.geom.Point2D getAnchorPoint() {
    return get(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY);
  }

  /* package */ java.awt.geom.Point2D getRawAnchorPoint() {
    return getRaw(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY);
  }

  @Override
  public void setAnchorPoint(java.awt.geom.Point2D anchorPoint) {
    set(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY, anchorPoint);
  }

  /* package */ java.awt.geom.Point2D setRawAnchorPoint(java.awt.geom.Point2D anchorPoint) {
    return setRaw(org.archstudio.bna.facets.IHasAnchorPoint.ANCHOR_POINT_KEY, anchorPoint);
  }

  @Override
  public @Nullable org.eclipse.swt.graphics.RGB getEdgeColor() {
    return get(org.archstudio.bna.facets.IHasEdgeColor.EDGE_COLOR_KEY);
  }

  /* package */ @Nullable
  org.eclipse.swt.graphics.RGB getRawEdgeColor() {
    return getRaw(org.archstudio.bna.facets.IHasEdgeColor.EDGE_COLOR_KEY);
  }

  @Override
  public void setEdgeColor(@Nullable org.eclipse.swt.graphics.RGB edgeColor) {
    set(org.archstudio.bna.facets.IHasEdgeColor.EDGE_COLOR_KEY, edgeColor);
  }

  /* package */ @Nullable
  org.eclipse.swt.graphics.RGB setRawEdgeColor(@Nullable org.eclipse.swt.graphics.RGB edgeColor) {
    return setRaw(org.archstudio.bna.facets.IHasEdgeColor.EDGE_COLOR_KEY, edgeColor);
  }

  @Override
  public double getGlowAlpha() {
    return get(org.archstudio.bna.facets.IHasGlow.GLOW_ALPHA_KEY);
  }

  /* package */ double getRawGlowAlpha() {
    return getRaw(org.archstudio.bna.facets.IHasGlow.GLOW_ALPHA_KEY);
  }

  @Override
  public void setGlowAlpha(double glowAlpha) {
    set(org.archstudio.bna.facets.IHasGlow.GLOW_ALPHA_KEY, glowAlpha);
  }

  /* package */ double setRawGlowAlpha(double glowAlpha) {
    return setRaw(org.archstudio.bna.facets.IHasGlow.GLOW_ALPHA_KEY, glowAlpha);
  }

  @Override
  public @Nullable org.eclipse.swt.graphics.RGB getGlowColor() {
    return get(org.archstudio.bna.facets.IHasGlow.GLOW_COLOR_KEY);
  }

  /* package */ @Nullable
  org.eclipse.swt.graphics.RGB getRawGlowColor() {
    return getRaw(org.archstudio.bna.facets.IHasGlow.GLOW_COLOR_KEY);
  }

  @Override
  public void setGlowColor(@Nullable org.eclipse.swt.graphics.RGB glowColor) {
    set(org.archstudio.bna.facets.IHasGlow.GLOW_COLOR_KEY, glowColor);
  }

  /* package */ @Nullable
  org.eclipse.swt.graphics.RGB setRawGlowColor(@Nullable org.eclipse.swt.graphics.RGB glowColor) {
    return setRaw(org.archstudio.bna.facets.IHasGlow.GLOW_COLOR_KEY, glowColor);
  }

  @Override
  public int getGlowWidth() {
    return get(org.archstudio.bna.facets.IHasGlow.GLOW_WIDTH_KEY);
  }

  /* package */ int getRawGlowWidth() {
    return getRaw(org.archstudio.bna.facets.IHasGlow.GLOW_WIDTH_KEY);
  }

  @Override
  public void setGlowWidth(int glowWidth) {
    set(org.archstudio.bna.facets.IHasGlow.GLOW_WIDTH_KEY, glowWidth);
  }

  /* package */ int setRawGlowWidth(int glowWidth) {
    return setRaw(org.archstudio.bna.facets.IHasGlow.GLOW_WIDTH_KEY, glowWidth);
  }

  @Override
  public java.awt.geom.Point2D getInternalPoint() {
    return get(org.archstudio.bna.facets.IHasInternalWorldPoint.INTERNAL_POINT_KEY);
  }

  /* package */ java.awt.geom.Point2D getRawInternalPoint() {
    return getRaw(org.archstudio.bna.facets.IHasInternalWorldPoint.INTERNAL_POINT_KEY);
  }

  @Override
  public void setInternalPoint(java.awt.geom.Point2D internalPoint) {
    set(org.archstudio.bna.facets.IHasInternalWorldPoint.INTERNAL_POINT_KEY, internalPoint);
  }

  /* package */ java.awt.geom.Point2D setRawInternalPoint(java.awt.geom.Point2D internalPoint) {
    return setRaw(org.archstudio.bna.facets.IHasInternalWorldPoint.INTERNAL_POINT_KEY,
        internalPoint);
  }

  @Override
  public org.archstudio.swtutils.constants.LineStyle getLineStyle() {
    return get(org.archstudio.bna.facets.IHasLineStyle.LINE_STYLE_KEY);
  }

  /* package */ org.archstudio.swtutils.constants.LineStyle getRawLineStyle() {
    return getRaw(org.archstudio.bna.facets.IHasLineStyle.LINE_STYLE_KEY);
  }

  @Override
  public void setLineStyle(org.archstudio.swtutils.constants.LineStyle lineStyle) {
    set(org.archstudio.bna.facets.IHasLineStyle.LINE_STYLE_KEY, lineStyle);
  }

  /* package */ org.archstudio.swtutils.constants.LineStyle setRawLineStyle(
      org.archstudio.swtutils.constants.LineStyle lineStyle) {
    return setRaw(org.archstudio.bna.facets.IHasLineStyle.LINE_STYLE_KEY, lineStyle);
  }

  @Override
  public int getLineWidth() {
    return get(org.archstudio.bna.facets.IHasLineWidth.LINE_WIDTH_KEY);
  }

  /* package */ int getRawLineWidth() {
    return getRaw(org.archstudio.bna.facets.IHasLineWidth.LINE_WIDTH_KEY);
  }

  @Override
  public void setLineWidth(int lineWidth) {
    set(org.archstudio.bna.facets.IHasLineWidth.LINE_WIDTH_KEY, lineWidth);
  }

  /* package */ int setRawLineWidth(int lineWidth) {
    return setRaw(org.archstudio.bna.facets.IHasLineWidth.LINE_WIDTH_KEY, lineWidth);
  }

  @Override
  public int getRotatingOffset() {
    return get(org.archstudio.bna.facets.IHasRotatingOffset.ROTATING_OFFSET_KEY);
  }

  /* package */ int getRawRotatingOffset() {
    return getRaw(org.archstudio.bna.facets.IHasRotatingOffset.ROTATING_OFFSET_KEY);
  }

  @Override
  public void setRotatingOffset(int rotatingOffset) {
    set(org.archstudio.bna.facets.IHasRotatingOffset.ROTATING_OFFSET_KEY, rotatingOffset);
  }

  /* package */ int setRawRotatingOffset(int rotatingOffset) {
    return setRaw(org.archstudio.bna.facets.IHasRotatingOffset.ROTATING_OFFSET_KEY, rotatingOffset);
  }

  @Override
  public boolean isSelected() {
    return get(org.archstudio.bna.facets.IHasSelected.SELECTED_KEY);
  }

  /* package */ boolean isRawSelected() {
    return getRaw(org.archstudio.bna.facets.IHasSelected.SELECTED_KEY);
  }

  @Override
  public void setSelected(boolean selected) {
    set(org.archstudio.bna.facets.IHasSelected.SELECTED_KEY, selected);
  }

  /* package */ boolean isRawSelected(boolean selected) {
    return setRaw(org.archstudio.bna.facets.IHasSelected.SELECTED_KEY, selected);
  }

  @Override
  public org.archstudio.bna.facets.IHasWorld getInternalWorld(org.archstudio.bna.IBNAModel model) {
    org.archstudio.bna.IThing thing =
        model.getThing(getRaw(org.archstudio.bna.facets.IHasInternalWorldPoint.INTERNAL_WORLD_KEY));
    if (thing instanceof org.archstudio.bna.facets.IHasWorld) {
      return (org.archstudio.bna.facets.IHasWorld) thing;
    }
    return null;
  }

  @Override
  public void setInternalWorld(org.archstudio.bna.facets.IHasWorld internalWorld) {
    setRaw(org.archstudio.bna.facets.IHasInternalWorldPoint.INTERNAL_WORLD_KEY,
        internalWorld.getID());
  }
}
