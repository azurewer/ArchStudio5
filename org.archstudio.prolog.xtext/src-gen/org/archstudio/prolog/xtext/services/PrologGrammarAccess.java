/*
* generated by Xtext
*/
package org.archstudio.prolog.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class PrologGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpsExpressionINFParserRuleCall_0_0 = (RuleCall)cExpsAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Program:
		//
		//	(exps+=ExpressionINF ".")+;
		public ParserRule getRule() { return rule; }

		//(exps+=ExpressionINF ".")+
		public Group getGroup() { return cGroup; }

		//exps+=ExpressionINF
		public Assignment getExpsAssignment_0() { return cExpsAssignment_0; }

		//ExpressionINF
		public RuleCall getExpsExpressionINFParserRuleCall_0_0() { return cExpsExpressionINFParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}

	public class ExpressionINFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionINF");
		private final RuleCall cExpression1200ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExpressionINF returns Expression:
		//
		//	Expression1200;
		public ParserRule getRule() { return rule; }

		//Expression1200
		public RuleCall getExpression1200ParserRuleCall() { return cExpression1200ParserRuleCall; }
	}

	public class Expression1200Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression1200");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression1200fxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_1200TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression1200fxParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression1200 returns Expression:
		//
		//	Expression1200fx (ops+=EXPRESSION_1200 exps+=Expression1200fx)?;
		public ParserRule getRule() { return rule; }

		//Expression1200fx (ops+=EXPRESSION_1200 exps+=Expression1200fx)?
		public Group getGroup() { return cGroup; }

		//Expression1200fx
		public RuleCall getExpression1200fxParserRuleCall_0() { return cExpression1200fxParserRuleCall_0; }

		//(ops+=EXPRESSION_1200 exps+=Expression1200fx)?
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_1200
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_1200
		public RuleCall getOpsEXPRESSION_1200TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_1200TerminalRuleCall_1_0_0; }

		//exps+=Expression1200fx
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression1200fx
		public RuleCall getExpsExpression1200fxParserRuleCall_1_1_0() { return cExpsExpression1200fxParserRuleCall_1_1_0; }
	}

	public class Expression1200fxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression1200fx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_1200FXTerminalRuleCall_0_0 = (RuleCall)cOpsAssignment_0.eContents().get(0);
		private final Assignment cExpsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpsExpression1100ParserRuleCall_1_0 = (RuleCall)cExpsAssignment_1.eContents().get(0);
		
		//Expression1200fx returns Expression:
		//
		//	ops+=EXPRESSION_1200FX? exps+=Expression1100;
		public ParserRule getRule() { return rule; }

		//ops+=EXPRESSION_1200FX? exps+=Expression1100
		public Group getGroup() { return cGroup; }

		//ops+=EXPRESSION_1200FX?
		public Assignment getOpsAssignment_0() { return cOpsAssignment_0; }

		//EXPRESSION_1200FX
		public RuleCall getOpsEXPRESSION_1200FXTerminalRuleCall_0_0() { return cOpsEXPRESSION_1200FXTerminalRuleCall_0_0; }

		//exps+=Expression1100
		public Assignment getExpsAssignment_1() { return cExpsAssignment_1; }

		//Expression1100
		public RuleCall getExpsExpression1100ParserRuleCall_1_0() { return cExpsExpression1100ParserRuleCall_1_0; }
	}

	public class Expression1100Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression1100");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression1000ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_1100TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression1000ParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression1100 returns Expression:
		//
		//	Expression1000 (ops+=EXPRESSION_1100 exps+=Expression1000)*;
		public ParserRule getRule() { return rule; }

		//Expression1000 (ops+=EXPRESSION_1100 exps+=Expression1000)*
		public Group getGroup() { return cGroup; }

		//Expression1000
		public RuleCall getExpression1000ParserRuleCall_0() { return cExpression1000ParserRuleCall_0; }

		//(ops+=EXPRESSION_1100 exps+=Expression1000)*
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_1100
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_1100
		public RuleCall getOpsEXPRESSION_1100TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_1100TerminalRuleCall_1_0_0; }

		//exps+=Expression1000
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression1000
		public RuleCall getExpsExpression1000ParserRuleCall_1_1_0() { return cExpsExpression1000ParserRuleCall_1_1_0; }
	}

	public class Expression1000Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression1000");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression900fxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_1000TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression900fxParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression1000 returns Expression:
		//
		//	Expression900fx (ops+=EXPRESSION_1000 exps+=Expression900fx)*;
		public ParserRule getRule() { return rule; }

		//Expression900fx (ops+=EXPRESSION_1000 exps+=Expression900fx)*
		public Group getGroup() { return cGroup; }

		//Expression900fx
		public RuleCall getExpression900fxParserRuleCall_0() { return cExpression900fxParserRuleCall_0; }

		//(ops+=EXPRESSION_1000 exps+=Expression900fx)*
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_1000
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_1000
		public RuleCall getOpsEXPRESSION_1000TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_1000TerminalRuleCall_1_0_0; }

		//exps+=Expression900fx
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression900fx
		public RuleCall getExpsExpression900fxParserRuleCall_1_1_0() { return cExpsExpression900fxParserRuleCall_1_1_0; }
	}

	public class Expression900fxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression900fx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_900FXTerminalRuleCall_0_0 = (RuleCall)cOpsAssignment_0.eContents().get(0);
		private final Assignment cExpsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpsExpression700ParserRuleCall_1_0 = (RuleCall)cExpsAssignment_1.eContents().get(0);
		
		//Expression900fx returns Expression:
		//
		//	ops+=EXPRESSION_900FX? exps+=Expression700;
		public ParserRule getRule() { return rule; }

		//ops+=EXPRESSION_900FX? exps+=Expression700
		public Group getGroup() { return cGroup; }

		//ops+=EXPRESSION_900FX?
		public Assignment getOpsAssignment_0() { return cOpsAssignment_0; }

		//EXPRESSION_900FX
		public RuleCall getOpsEXPRESSION_900FXTerminalRuleCall_0_0() { return cOpsEXPRESSION_900FXTerminalRuleCall_0_0; }

		//exps+=Expression700
		public Assignment getExpsAssignment_1() { return cExpsAssignment_1; }

		//Expression700
		public RuleCall getExpsExpression700ParserRuleCall_1_0() { return cExpsExpression700ParserRuleCall_1_0; }
	}

	public class Expression700Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression700");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression600ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_700TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression600ParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression700 returns Expression:
		//
		//	Expression600 (ops+=EXPRESSION_700 exps+=Expression600)?;
		public ParserRule getRule() { return rule; }

		//Expression600 (ops+=EXPRESSION_700 exps+=Expression600)?
		public Group getGroup() { return cGroup; }

		//Expression600
		public RuleCall getExpression600ParserRuleCall_0() { return cExpression600ParserRuleCall_0; }

		//(ops+=EXPRESSION_700 exps+=Expression600)?
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_700
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_700
		public RuleCall getOpsEXPRESSION_700TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_700TerminalRuleCall_1_0_0; }

		//exps+=Expression600
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression600
		public RuleCall getExpsExpression600ParserRuleCall_1_1_0() { return cExpsExpression600ParserRuleCall_1_1_0; }
	}

	public class Expression600Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression600");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression500ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_600TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression500ParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression600 returns Expression:
		//
		//	Expression500 (ops+=EXPRESSION_600 exps+=Expression500)?;
		public ParserRule getRule() { return rule; }

		//Expression500 (ops+=EXPRESSION_600 exps+=Expression500)?
		public Group getGroup() { return cGroup; }

		//Expression500
		public RuleCall getExpression500ParserRuleCall_0() { return cExpression500ParserRuleCall_0; }

		//(ops+=EXPRESSION_600 exps+=Expression500)?
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_600
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_600
		public RuleCall getOpsEXPRESSION_600TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_600TerminalRuleCall_1_0_0; }

		//exps+=Expression500
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression500
		public RuleCall getExpsExpression500ParserRuleCall_1_1_0() { return cExpsExpression500ParserRuleCall_1_1_0; }
	}

	public class Expression500Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression500");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression400ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_500TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression400ParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression500 returns Expression:
		//
		//	Expression400 (ops+=EXPRESSION_500 exps+=Expression400)?;
		public ParserRule getRule() { return rule; }

		//Expression400 (ops+=EXPRESSION_500 exps+=Expression400)?
		public Group getGroup() { return cGroup; }

		//Expression400
		public RuleCall getExpression400ParserRuleCall_0() { return cExpression400ParserRuleCall_0; }

		//(ops+=EXPRESSION_500 exps+=Expression400)?
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_500
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_500
		public RuleCall getOpsEXPRESSION_500TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_500TerminalRuleCall_1_0_0; }

		//exps+=Expression400
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression400
		public RuleCall getExpsExpression400ParserRuleCall_1_1_0() { return cExpsExpression400ParserRuleCall_1_1_0; }
	}

	public class Expression400Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression400");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression200ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_400TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression200ParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression400 returns Expression:
		//
		//	Expression200 (ops+=EXPRESSION_400 exps+=Expression200)?;
		public ParserRule getRule() { return rule; }

		//Expression200 (ops+=EXPRESSION_400 exps+=Expression200)?
		public Group getGroup() { return cGroup; }

		//Expression200
		public RuleCall getExpression200ParserRuleCall_0() { return cExpression200ParserRuleCall_0; }

		//(ops+=EXPRESSION_400 exps+=Expression200)?
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_400
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_400
		public RuleCall getOpsEXPRESSION_400TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_400TerminalRuleCall_1_0_0; }

		//exps+=Expression200
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression200
		public RuleCall getExpsExpression200ParserRuleCall_1_1_0() { return cExpsExpression200ParserRuleCall_1_1_0; }
	}

	public class Expression200Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression200");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression0ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_200TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression0ParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression200 returns Expression:
		//
		//	Expression0 (ops+=EXPRESSION_200 exps+=Expression0)?;
		public ParserRule getRule() { return rule; }

		//Expression0 (ops+=EXPRESSION_200 exps+=Expression0)?
		public Group getGroup() { return cGroup; }

		//Expression0
		public RuleCall getExpression0ParserRuleCall_0() { return cExpression0ParserRuleCall_0; }

		//(ops+=EXPRESSION_200 exps+=Expression0)?
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_200
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_200
		public RuleCall getOpsEXPRESSION_200TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_200TerminalRuleCall_1_0_0; }

		//exps+=Expression0
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression0
		public RuleCall getExpsExpression0ParserRuleCall_1_1_0() { return cExpsExpression0ParserRuleCall_1_1_0; }
	}

	public class Expression0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression0");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOpsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cOpsAlternatives_0_0_0 = (Alternatives)cOpsAssignment_0_0.eContents().get(0);
		private final Keyword cOpsFullStopKeyword_0_0_0_0 = (Keyword)cOpsAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cOpsATOMTerminalRuleCall_0_0_0_1 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(1);
		private final RuleCall cOpsEXPRESSION_1200TerminalRuleCall_0_0_0_2 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(2);
		private final RuleCall cOpsEXPRESSION_1200FXTerminalRuleCall_0_0_0_3 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(3);
		private final RuleCall cOpsEXPRESSION_1100TerminalRuleCall_0_0_0_4 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(4);
		private final RuleCall cOpsEXPRESSION_1000TerminalRuleCall_0_0_0_5 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(5);
		private final RuleCall cOpsEXPRESSION_900FXTerminalRuleCall_0_0_0_6 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(6);
		private final RuleCall cOpsEXPRESSION_700TerminalRuleCall_0_0_0_7 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(7);
		private final RuleCall cOpsEXPRESSION_600TerminalRuleCall_0_0_0_8 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(8);
		private final RuleCall cOpsEXPRESSION_500TerminalRuleCall_0_0_0_9 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(9);
		private final RuleCall cOpsEXPRESSION_400TerminalRuleCall_0_0_0_10 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(10);
		private final RuleCall cOpsEXPRESSION_200TerminalRuleCall_0_0_0_11 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(11);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cPrefixAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cPrefixLeftParenthesisKeyword_0_1_0_0 = (Keyword)cPrefixAssignment_0_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpsExpressionINFParserRuleCall_0_1_1_0 = (RuleCall)cExpsAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVARIABLETerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cNumberAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNumberNUMBERParserRuleCall_3_0 = (RuleCall)cNumberAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cListAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cListLeftSquareBracketKeyword_4_0_0 = (Keyword)cListAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cHeadsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cHeadsExpressionINFParserRuleCall_4_1_0_0 = (RuleCall)cHeadsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cTailsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cTailsExpressionINFParserRuleCall_4_1_1_1_0 = (RuleCall)cTailsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpsExpressionINFParserRuleCall_5_1_0 = (RuleCall)cExpsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Expression0 returns Expression:
		//
		//	ops+=("." | ATOM | EXPRESSION_1200 | EXPRESSION_1200FX | EXPRESSION_1100 | EXPRESSION_1000 | EXPRESSION_900FX |
		//
		//	EXPRESSION_700 | EXPRESSION_600 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200) (prefix?="(" exps+=ExpressionINF
		//
		//	")")? | variable=VARIABLE | string=STRING | number=NUMBER | list?="[" (heads+=ExpressionINF ("|"
		//
		//	tails+=ExpressionINF)?)? "]" | "(" exps+=ExpressionINF ")";
		public ParserRule getRule() { return rule; }

		//ops+=("." | ATOM | EXPRESSION_1200 | EXPRESSION_1200FX | EXPRESSION_1100 | EXPRESSION_1000 | EXPRESSION_900FX |
		//
		//EXPRESSION_700 | EXPRESSION_600 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200) (prefix?="(" exps+=ExpressionINF
		//
		//")")? | variable=VARIABLE | string=STRING | number=NUMBER | list?="[" (heads+=ExpressionINF ("|"
		//
		//tails+=ExpressionINF)?)? "]" | "(" exps+=ExpressionINF ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ops+=("." | ATOM | EXPRESSION_1200 | EXPRESSION_1200FX | EXPRESSION_1100 | EXPRESSION_1000 | EXPRESSION_900FX |
		//
		//EXPRESSION_700 | EXPRESSION_600 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200) (prefix?="(" exps+=ExpressionINF
		//
		//")")?
		public Group getGroup_0() { return cGroup_0; }

		//ops+=("." | ATOM | EXPRESSION_1200 | EXPRESSION_1200FX | EXPRESSION_1100 | EXPRESSION_1000 | EXPRESSION_900FX |
		//
		//EXPRESSION_700 | EXPRESSION_600 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200)
		public Assignment getOpsAssignment_0_0() { return cOpsAssignment_0_0; }

		//"." | ATOM | EXPRESSION_1200 | EXPRESSION_1200FX | EXPRESSION_1100 | EXPRESSION_1000 | EXPRESSION_900FX | EXPRESSION_700
		//
		//| EXPRESSION_600 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200
		public Alternatives getOpsAlternatives_0_0_0() { return cOpsAlternatives_0_0_0; }

		//"."
		public Keyword getOpsFullStopKeyword_0_0_0_0() { return cOpsFullStopKeyword_0_0_0_0; }

		//ATOM
		public RuleCall getOpsATOMTerminalRuleCall_0_0_0_1() { return cOpsATOMTerminalRuleCall_0_0_0_1; }

		//EXPRESSION_1200
		public RuleCall getOpsEXPRESSION_1200TerminalRuleCall_0_0_0_2() { return cOpsEXPRESSION_1200TerminalRuleCall_0_0_0_2; }

		//EXPRESSION_1200FX
		public RuleCall getOpsEXPRESSION_1200FXTerminalRuleCall_0_0_0_3() { return cOpsEXPRESSION_1200FXTerminalRuleCall_0_0_0_3; }

		//EXPRESSION_1100
		public RuleCall getOpsEXPRESSION_1100TerminalRuleCall_0_0_0_4() { return cOpsEXPRESSION_1100TerminalRuleCall_0_0_0_4; }

		//EXPRESSION_1000
		public RuleCall getOpsEXPRESSION_1000TerminalRuleCall_0_0_0_5() { return cOpsEXPRESSION_1000TerminalRuleCall_0_0_0_5; }

		//EXPRESSION_900FX
		public RuleCall getOpsEXPRESSION_900FXTerminalRuleCall_0_0_0_6() { return cOpsEXPRESSION_900FXTerminalRuleCall_0_0_0_6; }

		//EXPRESSION_700
		public RuleCall getOpsEXPRESSION_700TerminalRuleCall_0_0_0_7() { return cOpsEXPRESSION_700TerminalRuleCall_0_0_0_7; }

		//EXPRESSION_600
		public RuleCall getOpsEXPRESSION_600TerminalRuleCall_0_0_0_8() { return cOpsEXPRESSION_600TerminalRuleCall_0_0_0_8; }

		//EXPRESSION_500
		public RuleCall getOpsEXPRESSION_500TerminalRuleCall_0_0_0_9() { return cOpsEXPRESSION_500TerminalRuleCall_0_0_0_9; }

		//EXPRESSION_400
		public RuleCall getOpsEXPRESSION_400TerminalRuleCall_0_0_0_10() { return cOpsEXPRESSION_400TerminalRuleCall_0_0_0_10; }

		//EXPRESSION_200
		public RuleCall getOpsEXPRESSION_200TerminalRuleCall_0_0_0_11() { return cOpsEXPRESSION_200TerminalRuleCall_0_0_0_11; }

		//(prefix?="(" exps+=ExpressionINF ")")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//prefix?="("
		public Assignment getPrefixAssignment_0_1_0() { return cPrefixAssignment_0_1_0; }

		//"("
		public Keyword getPrefixLeftParenthesisKeyword_0_1_0_0() { return cPrefixLeftParenthesisKeyword_0_1_0_0; }

		//exps+=ExpressionINF
		public Assignment getExpsAssignment_0_1_1() { return cExpsAssignment_0_1_1; }

		//ExpressionINF
		public RuleCall getExpsExpressionINFParserRuleCall_0_1_1_0() { return cExpsExpressionINFParserRuleCall_0_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }

		//variable=VARIABLE
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_1_0() { return cVariableVARIABLETerminalRuleCall_1_0; }

		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }

		//number=NUMBER
		public Assignment getNumberAssignment_3() { return cNumberAssignment_3; }

		//NUMBER
		public RuleCall getNumberNUMBERParserRuleCall_3_0() { return cNumberNUMBERParserRuleCall_3_0; }

		//list?="[" (heads+=ExpressionINF ("|" tails+=ExpressionINF)?)? "]"
		public Group getGroup_4() { return cGroup_4; }

		//list?="["
		public Assignment getListAssignment_4_0() { return cListAssignment_4_0; }

		//"["
		public Keyword getListLeftSquareBracketKeyword_4_0_0() { return cListLeftSquareBracketKeyword_4_0_0; }

		//(heads+=ExpressionINF ("|" tails+=ExpressionINF)?)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//heads+=ExpressionINF
		public Assignment getHeadsAssignment_4_1_0() { return cHeadsAssignment_4_1_0; }

		//ExpressionINF
		public RuleCall getHeadsExpressionINFParserRuleCall_4_1_0_0() { return cHeadsExpressionINFParserRuleCall_4_1_0_0; }

		//("|" tails+=ExpressionINF)?
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//"|"
		public Keyword getVerticalLineKeyword_4_1_1_0() { return cVerticalLineKeyword_4_1_1_0; }

		//tails+=ExpressionINF
		public Assignment getTailsAssignment_4_1_1_1() { return cTailsAssignment_4_1_1_1; }

		//ExpressionINF
		public RuleCall getTailsExpressionINFParserRuleCall_4_1_1_1_0() { return cTailsExpressionINFParserRuleCall_4_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }

		//"(" exps+=ExpressionINF ")"
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//exps+=ExpressionINF
		public Assignment getExpsAssignment_5_1() { return cExpsAssignment_5_1; }

		//ExpressionINF
		public RuleCall getExpsExpressionINFParserRuleCall_5_1_0() { return cExpsExpressionINFParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDIGITTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cDIGITTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//NUMBER:
		//
		//	"-"? DIGIT+ ("." DIGIT+)? (("e" | "E") ("+" | "-")? DIGIT+)?;
		public ParserRule getRule() { return rule; }

		//"-"? DIGIT+ ("." DIGIT+)? (("e" | "E") ("+" | "-")? DIGIT+)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//DIGIT+
		public RuleCall getDIGITTerminalRuleCall_1() { return cDIGITTerminalRuleCall_1; }

		//("." DIGIT+)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//DIGIT+
		public RuleCall getDIGITTerminalRuleCall_2_1() { return cDIGITTerminalRuleCall_2_1; }

		//(("e" | "E") ("+" | "-")? DIGIT+)?
		public Group getGroup_3() { return cGroup_3; }

		//"e" | "E"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//"e"
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }

		//"E"
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }

		//("+" | "-")?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"+"
		public Keyword getPlusSignKeyword_3_1_0() { return cPlusSignKeyword_3_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_3_1_1() { return cHyphenMinusKeyword_3_1_1; }

		//DIGIT+
		public RuleCall getDIGITTerminalRuleCall_3_2() { return cDIGITTerminalRuleCall_3_2; }
	}
	
	
	private ProgramElements pProgram;
	private ExpressionINFElements pExpressionINF;
	private Expression1200Elements pExpression1200;
	private TerminalRule tEXPRESSION_1200;
	private Expression1200fxElements pExpression1200fx;
	private TerminalRule tEXPRESSION_1200FX;
	private Expression1100Elements pExpression1100;
	private TerminalRule tEXPRESSION_1100;
	private Expression1000Elements pExpression1000;
	private TerminalRule tEXPRESSION_1000;
	private Expression900fxElements pExpression900fx;
	private TerminalRule tEXPRESSION_900FX;
	private Expression700Elements pExpression700;
	private TerminalRule tEXPRESSION_700;
	private Expression600Elements pExpression600;
	private TerminalRule tEXPRESSION_600;
	private Expression500Elements pExpression500;
	private TerminalRule tEXPRESSION_500;
	private Expression400Elements pExpression400;
	private TerminalRule tEXPRESSION_400;
	private Expression200Elements pExpression200;
	private TerminalRule tEXPRESSION_200;
	private Expression0Elements pExpression0;
	private TerminalRule tATOM;
	private TerminalRule tVARIABLE;
	private TerminalRule tSTRING;
	private TerminalRule tDIGIT;
	private NUMBERElements pNUMBER;
	private TerminalRule tWHITESPACE;
	private TerminalRule tSINGLE_LINE_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public PrologGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.archstudio.prolog.xtext.Prolog".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Program:
	//
	//	(exps+=ExpressionINF ".")+;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//ExpressionINF returns Expression:
	//
	//	Expression1200;
	public ExpressionINFElements getExpressionINFAccess() {
		return (pExpressionINF != null) ? pExpressionINF : (pExpressionINF = new ExpressionINFElements());
	}
	
	public ParserRule getExpressionINFRule() {
		return getExpressionINFAccess().getRule();
	}

	//Expression1200 returns Expression:
	//
	//	Expression1200fx (ops+=EXPRESSION_1200 exps+=Expression1200fx)?;
	public Expression1200Elements getExpression1200Access() {
		return (pExpression1200 != null) ? pExpression1200 : (pExpression1200 = new Expression1200Elements());
	}
	
	public ParserRule getExpression1200Rule() {
		return getExpression1200Access().getRule();
	}

	//terminal EXPRESSION_1200:
	//
	//	"-->" | ":-";
	public TerminalRule getEXPRESSION_1200Rule() {
		return (tEXPRESSION_1200 != null) ? tEXPRESSION_1200 : (tEXPRESSION_1200 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_1200"));
	} 

	//Expression1200fx returns Expression:
	//
	//	ops+=EXPRESSION_1200FX? exps+=Expression1100;
	public Expression1200fxElements getExpression1200fxAccess() {
		return (pExpression1200fx != null) ? pExpression1200fx : (pExpression1200fx = new Expression1200fxElements());
	}
	
	public ParserRule getExpression1200fxRule() {
		return getExpression1200fxAccess().getRule();
	}

	//terminal EXPRESSION_1200FX:
	//
	//	"?-";
	public TerminalRule getEXPRESSION_1200FXRule() {
		return (tEXPRESSION_1200FX != null) ? tEXPRESSION_1200FX : (tEXPRESSION_1200FX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_1200FX"));
	} 

	//Expression1100 returns Expression:
	//
	//	Expression1000 (ops+=EXPRESSION_1100 exps+=Expression1000)*;
	public Expression1100Elements getExpression1100Access() {
		return (pExpression1100 != null) ? pExpression1100 : (pExpression1100 = new Expression1100Elements());
	}
	
	public ParserRule getExpression1100Rule() {
		return getExpression1100Access().getRule();
	}

	//terminal EXPRESSION_1100:
	//
	//	";" | "|";
	public TerminalRule getEXPRESSION_1100Rule() {
		return (tEXPRESSION_1100 != null) ? tEXPRESSION_1100 : (tEXPRESSION_1100 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_1100"));
	} 

	//Expression1000 returns Expression:
	//
	//	Expression900fx (ops+=EXPRESSION_1000 exps+=Expression900fx)*;
	public Expression1000Elements getExpression1000Access() {
		return (pExpression1000 != null) ? pExpression1000 : (pExpression1000 = new Expression1000Elements());
	}
	
	public ParserRule getExpression1000Rule() {
		return getExpression1000Access().getRule();
	}

	//terminal EXPRESSION_1000:
	//
	//	",";
	public TerminalRule getEXPRESSION_1000Rule() {
		return (tEXPRESSION_1000 != null) ? tEXPRESSION_1000 : (tEXPRESSION_1000 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_1000"));
	} 

	//Expression900fx returns Expression:
	//
	//	ops+=EXPRESSION_900FX? exps+=Expression700;
	public Expression900fxElements getExpression900fxAccess() {
		return (pExpression900fx != null) ? pExpression900fx : (pExpression900fx = new Expression900fxElements());
	}
	
	public ParserRule getExpression900fxRule() {
		return getExpression900fxAccess().getRule();
	}

	//terminal EXPRESSION_900FX:
	//
	//	"\\+" | "not";
	public TerminalRule getEXPRESSION_900FXRule() {
		return (tEXPRESSION_900FX != null) ? tEXPRESSION_900FX : (tEXPRESSION_900FX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_900FX"));
	} 

	//Expression700 returns Expression:
	//
	//	Expression600 (ops+=EXPRESSION_700 exps+=Expression600)?;
	public Expression700Elements getExpression700Access() {
		return (pExpression700 != null) ? pExpression700 : (pExpression700 = new Expression700Elements());
	}
	
	public ParserRule getExpression700Rule() {
		return getExpression700Access().getRule();
	}

	//terminal EXPRESSION_700:
	//
	//	"<" | "=" | "=.." | "=@=" | "=:=" | "=<" | "==" | "=\\=" | ">" | ">=" | "@<" | "@=<" | "@>" | "@>=" | "\\=" | "\\=="
	//
	//	| "is";
	public TerminalRule getEXPRESSION_700Rule() {
		return (tEXPRESSION_700 != null) ? tEXPRESSION_700 : (tEXPRESSION_700 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_700"));
	} 

	//Expression600 returns Expression:
	//
	//	Expression500 (ops+=EXPRESSION_600 exps+=Expression500)?;
	public Expression600Elements getExpression600Access() {
		return (pExpression600 != null) ? pExpression600 : (pExpression600 = new Expression600Elements());
	}
	
	public ParserRule getExpression600Rule() {
		return getExpression600Access().getRule();
	}

	//terminal EXPRESSION_600:
	//
	//	":";
	public TerminalRule getEXPRESSION_600Rule() {
		return (tEXPRESSION_600 != null) ? tEXPRESSION_600 : (tEXPRESSION_600 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_600"));
	} 

	//Expression500 returns Expression:
	//
	//	Expression400 (ops+=EXPRESSION_500 exps+=Expression400)?;
	public Expression500Elements getExpression500Access() {
		return (pExpression500 != null) ? pExpression500 : (pExpression500 = new Expression500Elements());
	}
	
	public ParserRule getExpression500Rule() {
		return getExpression500Access().getRule();
	}

	//terminal EXPRESSION_500:
	//
	//	"+" | "-" | "/\\" | "\\/" | "xor";
	public TerminalRule getEXPRESSION_500Rule() {
		return (tEXPRESSION_500 != null) ? tEXPRESSION_500 : (tEXPRESSION_500 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_500"));
	} 

	//Expression400 returns Expression:
	//
	//	Expression200 (ops+=EXPRESSION_400 exps+=Expression200)?;
	public Expression400Elements getExpression400Access() {
		return (pExpression400 != null) ? pExpression400 : (pExpression400 = new Expression400Elements());
	}
	
	public ParserRule getExpression400Rule() {
		return getExpression400Access().getRule();
	}

	//terminal EXPRESSION_400:
	//
	//	"*" | "/" | "//" | "rdiv" | "<<" | ">>" | "mod" | "rem";
	public TerminalRule getEXPRESSION_400Rule() {
		return (tEXPRESSION_400 != null) ? tEXPRESSION_400 : (tEXPRESSION_400 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_400"));
	} 

	//Expression200 returns Expression:
	//
	//	Expression0 (ops+=EXPRESSION_200 exps+=Expression0)?;
	public Expression200Elements getExpression200Access() {
		return (pExpression200 != null) ? pExpression200 : (pExpression200 = new Expression200Elements());
	}
	
	public ParserRule getExpression200Rule() {
		return getExpression200Access().getRule();
	}

	//terminal EXPRESSION_200:
	//
	//	"**" | "^";
	public TerminalRule getEXPRESSION_200Rule() {
		return (tEXPRESSION_200 != null) ? tEXPRESSION_200 : (tEXPRESSION_200 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_200"));
	} 

	//Expression0 returns Expression:
	//
	//	ops+=("." | ATOM | EXPRESSION_1200 | EXPRESSION_1200FX | EXPRESSION_1100 | EXPRESSION_1000 | EXPRESSION_900FX |
	//
	//	EXPRESSION_700 | EXPRESSION_600 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200) (prefix?="(" exps+=ExpressionINF
	//
	//	")")? | variable=VARIABLE | string=STRING | number=NUMBER | list?="[" (heads+=ExpressionINF ("|"
	//
	//	tails+=ExpressionINF)?)? "]" | "(" exps+=ExpressionINF ")";
	public Expression0Elements getExpression0Access() {
		return (pExpression0 != null) ? pExpression0 : (pExpression0 = new Expression0Elements());
	}
	
	public ParserRule getExpression0Rule() {
		return getExpression0Access().getRule();
	}

	//terminal ATOM:
	//
	//	"a".."z" ("0".."9" | "a".."z" | "A".."Z" | "_")*;
	public TerminalRule getATOMRule() {
		return (tATOM != null) ? tATOM : (tATOM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATOM"));
	} 

	//terminal VARIABLE:
	//
	//	("A".."Z" | "_") ("0".."9" | "a".."z" | "A".."Z" | "_")*;
	public TerminalRule getVARIABLERule() {
		return (tVARIABLE != null) ? tVARIABLE : (tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VARIABLE"));
	} 

	//terminal STRING:
	//
	//	"\'" ("0".."9" | "a".."z" | "A".."Z" | "_" | "+" | "-" | "*" | "/" | "\\" | "^" | "~" | ":" | "." | "?" | "@" | "#" |
	//
	//	"$" | "&" | " ")* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal DIGIT:
	//
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return (tDIGIT != null) ? tDIGIT : (tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT"));
	} 

	//NUMBER:
	//
	//	"-"? DIGIT+ ("." DIGIT+)? (("e" | "E") ("+" | "-")? DIGIT+)?;
	public NUMBERElements getNUMBERAccess() {
		return (pNUMBER != null) ? pNUMBER : (pNUMBER = new NUMBERElements());
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//terminal WHITESPACE:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWHITESPACERule() {
		return (tWHITESPACE != null) ? tWHITESPACE : (tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHITESPACE"));
	} 

	//terminal SINGLE_LINE_COMMENT:
	//
	//	"%" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSINGLE_LINE_COMMENTRule() {
		return (tSINGLE_LINE_COMMENT != null) ? tSINGLE_LINE_COMMENT : (tSINGLE_LINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGLE_LINE_COMMENT"));
	} 
}
