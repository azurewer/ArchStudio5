/*
* generated by Xtext
*/

package org.archstudio.prolog.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PrologGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClausesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClausesSingleClauseParserRuleCall_0_0 = (RuleCall)cClausesAssignment_0.eContents().get(0);
		private final Assignment cQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryQueryParserRuleCall_1_0 = (RuleCall)cQueryAssignment_1.eContents().get(0);
		
		//Program:
		//
		//	clauses+=SingleClause* query=Query?;
		public ParserRule getRule() { return rule; }

		//clauses+=SingleClause* query=Query?
		public Group getGroup() { return cGroup; }

		//clauses+=SingleClause*
		public Assignment getClausesAssignment_0() { return cClausesAssignment_0; }

		//SingleClause
		public RuleCall getClausesSingleClauseParserRuleCall_0_0() { return cClausesSingleClauseParserRuleCall_0_0; }

		//query=Query?
		public Assignment getQueryAssignment_1() { return cQueryAssignment_1; }

		//Query
		public RuleCall getQueryQueryParserRuleCall_1_0() { return cQueryQueryParserRuleCall_1_0; }
	}

	public class SingleClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicatesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicatesPredicateParserRuleCall_0_0 = (RuleCall)cPredicatesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPredicatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPredicatesPredicateParserRuleCall_1_1_0 = (RuleCall)cPredicatesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cPredicatesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cPredicatesPredicateParserRuleCall_1_2_1_0 = (RuleCall)cPredicatesAssignment_1_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SingleClause:
		//
		//	predicates+=Predicate (":-" predicates+=Predicate ("," predicates+=Predicate)*)? ".";
		public ParserRule getRule() { return rule; }

		//predicates+=Predicate (":-" predicates+=Predicate ("," predicates+=Predicate)*)? "."
		public Group getGroup() { return cGroup; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_0() { return cPredicatesAssignment_0; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_0_0() { return cPredicatesPredicateParserRuleCall_0_0; }

		//(":-" predicates+=Predicate ("," predicates+=Predicate)*)?
		public Group getGroup_1() { return cGroup_1; }

		//":-"
		public Keyword getColonHyphenMinusKeyword_1_0() { return cColonHyphenMinusKeyword_1_0; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_1_1() { return cPredicatesAssignment_1_1; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_1_1_0() { return cPredicatesPredicateParserRuleCall_1_1_0; }

		//("," predicates+=Predicate)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_1_2_1() { return cPredicatesAssignment_1_2_1; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_1_2_1_0() { return cPredicatesPredicateParserRuleCall_1_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredicatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicatesPredicateParserRuleCall_1_0 = (RuleCall)cPredicatesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPredicatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredicatesPredicateParserRuleCall_2_1_0 = (RuleCall)cPredicatesAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Query:
		//
		//	"?-" predicates+=Predicate ("," predicates+=Predicate)* ".";
		public ParserRule getRule() { return rule; }

		//"?-" predicates+=Predicate ("," predicates+=Predicate)* "."
		public Group getGroup() { return cGroup; }

		//"?-"
		public Keyword getQuestionMarkHyphenMinusKeyword_0() { return cQuestionMarkHyphenMinusKeyword_0; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_1() { return cPredicatesAssignment_1; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_1_0() { return cPredicatesPredicateParserRuleCall_1_0; }

		//("," predicates+=Predicate)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_2_1() { return cPredicatesAssignment_2_1; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_2_1_0() { return cPredicatesPredicateParserRuleCall_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cValueAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cValueSingleTermParserRuleCall_0_0_0 = (RuleCall)cValueAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cTermsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cTermsSingleTermParserRuleCall_0_1_1_0 = (RuleCall)cTermsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cTermsAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cTermsSingleTermParserRuleCall_0_1_2_1_0 = (RuleCall)cTermsAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOperationAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperationAlternatives_1_0_0 = (Alternatives)cOperationAssignment_1_0.eContents().get(0);
		private final Keyword cOperationEqualsSignEqualsSignKeyword_1_0_0_0 = (Keyword)cOperationAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperationReverseSolidusEqualsSignKeyword_1_0_0_1 = (Keyword)cOperationAlternatives_1_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTermsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTermsSingleTermParserRuleCall_1_2_0 = (RuleCall)cTermsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cTermsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cTermsSingleTermParserRuleCall_1_3_1_0 = (RuleCall)cTermsAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTermsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTermsSingleTermParserRuleCall_2_0_0 = (RuleCall)cTermsAssignment_2_0.eContents().get(0);
		private final Assignment cOperationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cOperationAlternatives_2_1_0 = (Alternatives)cOperationAssignment_2_1.eContents().get(0);
		private final Keyword cOperationEqualsSignEqualsSignKeyword_2_1_0_0 = (Keyword)cOperationAlternatives_2_1_0.eContents().get(0);
		private final Keyword cOperationReverseSolidusEqualsSignKeyword_2_1_0_1 = (Keyword)cOperationAlternatives_2_1_0.eContents().get(1);
		private final Assignment cTermsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTermsSingleTermParserRuleCall_2_2_0 = (RuleCall)cTermsAssignment_2_2.eContents().get(0);
		
		//Predicate:
		//
		//	value=SingleTerm ("(" terms+=SingleTerm ("," terms+=SingleTerm)* ")")? | operation=("==" | "\\=") "("
		//
		//	terms+=SingleTerm ("," terms+=SingleTerm)* ")" | terms+=SingleTerm operation=("==" | "\\=") terms+=SingleTerm;
		public ParserRule getRule() { return rule; }

		//value=SingleTerm ("(" terms+=SingleTerm ("," terms+=SingleTerm)* ")")? | operation=("==" | "\\=") "(" terms+=SingleTerm
		//
		//("," terms+=SingleTerm)* ")" | terms+=SingleTerm operation=("==" | "\\=") terms+=SingleTerm
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=SingleTerm ("(" terms+=SingleTerm ("," terms+=SingleTerm)* ")")?
		public Group getGroup_0() { return cGroup_0; }

		//value=SingleTerm
		public Assignment getValueAssignment_0_0() { return cValueAssignment_0_0; }

		//SingleTerm
		public RuleCall getValueSingleTermParserRuleCall_0_0_0() { return cValueSingleTermParserRuleCall_0_0_0; }

		//("(" terms+=SingleTerm ("," terms+=SingleTerm)* ")")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }

		//terms+=SingleTerm
		public Assignment getTermsAssignment_0_1_1() { return cTermsAssignment_0_1_1; }

		//SingleTerm
		public RuleCall getTermsSingleTermParserRuleCall_0_1_1_0() { return cTermsSingleTermParserRuleCall_0_1_1_0; }

		//("," terms+=SingleTerm)*
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//","
		public Keyword getCommaKeyword_0_1_2_0() { return cCommaKeyword_0_1_2_0; }

		//terms+=SingleTerm
		public Assignment getTermsAssignment_0_1_2_1() { return cTermsAssignment_0_1_2_1; }

		//SingleTerm
		public RuleCall getTermsSingleTermParserRuleCall_0_1_2_1_0() { return cTermsSingleTermParserRuleCall_0_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_3() { return cRightParenthesisKeyword_0_1_3; }

		//operation=("==" | "\\=") "(" terms+=SingleTerm ("," terms+=SingleTerm)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//operation=("==" | "\\=")
		public Assignment getOperationAssignment_1_0() { return cOperationAssignment_1_0; }

		//"==" | "\\="
		public Alternatives getOperationAlternatives_1_0_0() { return cOperationAlternatives_1_0_0; }

		//"=="
		public Keyword getOperationEqualsSignEqualsSignKeyword_1_0_0_0() { return cOperationEqualsSignEqualsSignKeyword_1_0_0_0; }

		//"\\="
		public Keyword getOperationReverseSolidusEqualsSignKeyword_1_0_0_1() { return cOperationReverseSolidusEqualsSignKeyword_1_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//terms+=SingleTerm
		public Assignment getTermsAssignment_1_2() { return cTermsAssignment_1_2; }

		//SingleTerm
		public RuleCall getTermsSingleTermParserRuleCall_1_2_0() { return cTermsSingleTermParserRuleCall_1_2_0; }

		//("," terms+=SingleTerm)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//terms+=SingleTerm
		public Assignment getTermsAssignment_1_3_1() { return cTermsAssignment_1_3_1; }

		//SingleTerm
		public RuleCall getTermsSingleTermParserRuleCall_1_3_1_0() { return cTermsSingleTermParserRuleCall_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//terms+=SingleTerm operation=("==" | "\\=") terms+=SingleTerm
		public Group getGroup_2() { return cGroup_2; }

		//terms+=SingleTerm
		public Assignment getTermsAssignment_2_0() { return cTermsAssignment_2_0; }

		//SingleTerm
		public RuleCall getTermsSingleTermParserRuleCall_2_0_0() { return cTermsSingleTermParserRuleCall_2_0_0; }

		//operation=("==" | "\\=")
		public Assignment getOperationAssignment_2_1() { return cOperationAssignment_2_1; }

		//"==" | "\\="
		public Alternatives getOperationAlternatives_2_1_0() { return cOperationAlternatives_2_1_0; }

		//"=="
		public Keyword getOperationEqualsSignEqualsSignKeyword_2_1_0_0() { return cOperationEqualsSignEqualsSignKeyword_2_1_0_0; }

		//"\\="
		public Keyword getOperationReverseSolidusEqualsSignKeyword_2_1_0_1() { return cOperationReverseSolidusEqualsSignKeyword_2_1_0_1; }

		//terms+=SingleTerm
		public Assignment getTermsAssignment_2_2() { return cTermsAssignment_2_2; }

		//SingleTerm
		public RuleCall getTermsSingleTermParserRuleCall_2_2_0() { return cTermsSingleTermParserRuleCall_2_2_0; }
	}

	public class SingleTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumeralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumeralNUMERALTerminalRuleCall_0_0 = (RuleCall)cNumeralAssignment_0.eContents().get(0);
		private final Assignment cAtomAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAtomSMALL_ATOMTerminalRuleCall_1_0 = (RuleCall)cAtomAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cVariableVARIABLETerminalRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Assignment cStringAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cStringSTRINGTerminalRuleCall_3_0 = (RuleCall)cStringAssignment_3.eContents().get(0);
		
		//SingleTerm:
		//
		//	numeral=NUMERAL | atom=SMALL_ATOM | variable=VARIABLE | string=STRING;
		public ParserRule getRule() { return rule; }

		//numeral=NUMERAL | atom=SMALL_ATOM | variable=VARIABLE | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//numeral=NUMERAL
		public Assignment getNumeralAssignment_0() { return cNumeralAssignment_0; }

		//NUMERAL
		public RuleCall getNumeralNUMERALTerminalRuleCall_0_0() { return cNumeralNUMERALTerminalRuleCall_0_0; }

		//atom=SMALL_ATOM
		public Assignment getAtomAssignment_1() { return cAtomAssignment_1; }

		//SMALL_ATOM
		public RuleCall getAtomSMALL_ATOMTerminalRuleCall_1_0() { return cAtomSMALL_ATOMTerminalRuleCall_1_0; }

		//variable=VARIABLE
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_2_0() { return cVariableVARIABLETerminalRuleCall_2_0; }

		//string=STRING
		public Assignment getStringAssignment_3() { return cStringAssignment_3; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_3_0() { return cStringSTRINGTerminalRuleCall_3_0; }
	}
	
	
	private ProgramElements pProgram;
	private SingleClauseElements pSingleClause;
	private QueryElements pQuery;
	private PredicateElements pPredicate;
	private SingleTermElements pSingleTerm;
	private TerminalRule tSMALL_ATOM;
	private TerminalRule tVARIABLE;
	private TerminalRule tNUMERAL;
	private TerminalRule tSTRING;
	private TerminalRule tDIGIT;
	private TerminalRule tLOWER_CASE_LETTER;
	private TerminalRule tUPPER_CASE_LETTER;
	private TerminalRule tSPECIAL;
	private TerminalRule tCHARACTER;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PrologGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.archstudio.prolog.xtext.Prolog".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//
	//	clauses+=SingleClause* query=Query?;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//SingleClause:
	//
	//	predicates+=Predicate (":-" predicates+=Predicate ("," predicates+=Predicate)*)? ".";
	public SingleClauseElements getSingleClauseAccess() {
		return (pSingleClause != null) ? pSingleClause : (pSingleClause = new SingleClauseElements());
	}
	
	public ParserRule getSingleClauseRule() {
		return getSingleClauseAccess().getRule();
	}

	//Query:
	//
	//	"?-" predicates+=Predicate ("," predicates+=Predicate)* ".";
	public QueryElements getQueryAccess() {
		return (pQuery != null) ? pQuery : (pQuery = new QueryElements());
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//Predicate:
	//
	//	value=SingleTerm ("(" terms+=SingleTerm ("," terms+=SingleTerm)* ")")? | operation=("==" | "\\=") "("
	//
	//	terms+=SingleTerm ("," terms+=SingleTerm)* ")" | terms+=SingleTerm operation=("==" | "\\=") terms+=SingleTerm;
	public PredicateElements getPredicateAccess() {
		return (pPredicate != null) ? pPredicate : (pPredicate = new PredicateElements());
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	//SingleTerm:
	//
	//	numeral=NUMERAL | atom=SMALL_ATOM | variable=VARIABLE | string=STRING;
	public SingleTermElements getSingleTermAccess() {
		return (pSingleTerm != null) ? pSingleTerm : (pSingleTerm = new SingleTermElements());
	}
	
	public ParserRule getSingleTermRule() {
		return getSingleTermAccess().getRule();
	}

	//terminal SMALL_ATOM:
	//
	//	LOWER_CASE_LETTER (DIGIT | LOWER_CASE_LETTER | UPPER_CASE_LETTER)*;
	public TerminalRule getSMALL_ATOMRule() {
		return (tSMALL_ATOM != null) ? tSMALL_ATOM : (tSMALL_ATOM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SMALL_ATOM"));
	} 

	//terminal VARIABLE:
	//
	//	UPPER_CASE_LETTER (DIGIT | LOWER_CASE_LETTER | UPPER_CASE_LETTER)*;
	public TerminalRule getVARIABLERule() {
		return (tVARIABLE != null) ? tVARIABLE : (tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VARIABLE"));
	} 

	//terminal NUMERAL:
	//
	//	"-"? DIGIT+;
	public TerminalRule getNUMERALRule() {
		return (tNUMERAL != null) ? tNUMERAL : (tNUMERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERAL"));
	} 

	//terminal STRING:
	//
	//	"\'" CHARACTER+ "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal DIGIT:
	//
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return (tDIGIT != null) ? tDIGIT : (tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT"));
	} 

	//terminal LOWER_CASE_LETTER:
	//
	//	"a".."z";
	public TerminalRule getLOWER_CASE_LETTERRule() {
		return (tLOWER_CASE_LETTER != null) ? tLOWER_CASE_LETTER : (tLOWER_CASE_LETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOWER_CASE_LETTER"));
	} 

	//terminal UPPER_CASE_LETTER:
	//
	//	"A".."Z" | "_";
	public TerminalRule getUPPER_CASE_LETTERRule() {
		return (tUPPER_CASE_LETTER != null) ? tUPPER_CASE_LETTER : (tUPPER_CASE_LETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UPPER_CASE_LETTER"));
	} 

	//terminal SPECIAL:
	//
	//	"+" | "-" | "*" | "/" | "\\" | "^" | "~" | ":" | "." | "?" | "@" | "#" | "$" | "&";
	public TerminalRule getSPECIALRule() {
		return (tSPECIAL != null) ? tSPECIAL : (tSPECIAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SPECIAL"));
	} 

	//terminal CHARACTER:
	//
	//	LOWER_CASE_LETTER | UPPER_CASE_LETTER | DIGIT | SPECIAL;
	public TerminalRule getCHARACTERRule() {
		return (tCHARACTER != null) ? tCHARACTER : (tCHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHARACTER"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
