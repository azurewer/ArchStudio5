/*
* generated by Xtext
*/

package org.archstudio.prolog.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class PrologGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClausesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClausesClauseParserRuleCall_0_0 = (RuleCall)cClausesAssignment_0.eContents().get(0);
		private final Assignment cQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryQueryParserRuleCall_1_0 = (RuleCall)cQueryAssignment_1.eContents().get(0);
		
		//Program:
		//
		//	clauses+=Clause* query=Query?;
		public ParserRule getRule() { return rule; }

		//clauses+=Clause* query=Query?
		public Group getGroup() { return cGroup; }

		//clauses+=Clause*
		public Assignment getClausesAssignment_0() { return cClausesAssignment_0; }

		//Clause
		public RuleCall getClausesClauseParserRuleCall_0_0() { return cClausesClauseParserRuleCall_0_0; }

		//query=Query?
		public Assignment getQueryAssignment_1() { return cQueryAssignment_1; }

		//Query
		public RuleCall getQueryQueryParserRuleCall_1_0() { return cQueryQueryParserRuleCall_1_0; }
	}

	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicatesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicatesExpressionINFParserRuleCall_0_0 = (RuleCall)cPredicatesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPredicatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPredicatesExpressionINFParserRuleCall_1_1_0 = (RuleCall)cPredicatesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cPredicatesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cPredicatesExpressionINFParserRuleCall_1_2_1_0 = (RuleCall)cPredicatesAssignment_1_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Clause:
		//
		//	predicates+=ExpressionINF (":-" predicates+=ExpressionINF ("," predicates+=ExpressionINF)*)? ".";
		public ParserRule getRule() { return rule; }

		//predicates+=ExpressionINF (":-" predicates+=ExpressionINF ("," predicates+=ExpressionINF)*)? "."
		public Group getGroup() { return cGroup; }

		//predicates+=ExpressionINF
		public Assignment getPredicatesAssignment_0() { return cPredicatesAssignment_0; }

		//ExpressionINF
		public RuleCall getPredicatesExpressionINFParserRuleCall_0_0() { return cPredicatesExpressionINFParserRuleCall_0_0; }

		//(":-" predicates+=ExpressionINF ("," predicates+=ExpressionINF)*)?
		public Group getGroup_1() { return cGroup_1; }

		//":-"
		public Keyword getColonHyphenMinusKeyword_1_0() { return cColonHyphenMinusKeyword_1_0; }

		//predicates+=ExpressionINF
		public Assignment getPredicatesAssignment_1_1() { return cPredicatesAssignment_1_1; }

		//ExpressionINF
		public RuleCall getPredicatesExpressionINFParserRuleCall_1_1_0() { return cPredicatesExpressionINFParserRuleCall_1_1_0; }

		//("," predicates+=ExpressionINF)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//predicates+=ExpressionINF
		public Assignment getPredicatesAssignment_1_2_1() { return cPredicatesAssignment_1_2_1; }

		//ExpressionINF
		public RuleCall getPredicatesExpressionINFParserRuleCall_1_2_1_0() { return cPredicatesExpressionINFParserRuleCall_1_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredicatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicatesExpressionINFParserRuleCall_1_0 = (RuleCall)cPredicatesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPredicatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredicatesExpressionINFParserRuleCall_2_1_0 = (RuleCall)cPredicatesAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Query:
		//
		//	"?-" predicates+=ExpressionINF ("," predicates+=ExpressionINF)* ".";
		public ParserRule getRule() { return rule; }

		//"?-" predicates+=ExpressionINF ("," predicates+=ExpressionINF)* "."
		public Group getGroup() { return cGroup; }

		//"?-"
		public Keyword getQuestionMarkHyphenMinusKeyword_0() { return cQuestionMarkHyphenMinusKeyword_0; }

		//predicates+=ExpressionINF
		public Assignment getPredicatesAssignment_1() { return cPredicatesAssignment_1; }

		//ExpressionINF
		public RuleCall getPredicatesExpressionINFParserRuleCall_1_0() { return cPredicatesExpressionINFParserRuleCall_1_0; }

		//("," predicates+=ExpressionINF)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//predicates+=ExpressionINF
		public Assignment getPredicatesAssignment_2_1() { return cPredicatesAssignment_2_1; }

		//ExpressionINF
		public RuleCall getPredicatesExpressionINFParserRuleCall_2_1_0() { return cPredicatesExpressionINFParserRuleCall_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}

	public class ExpressionINFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionINF");
		private final RuleCall cExpression1100ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExpressionINF returns Expression:
		//
		//	Expression1100;
		public ParserRule getRule() { return rule; }

		//Expression1100
		public RuleCall getExpression1100ParserRuleCall() { return cExpression1100ParserRuleCall; }
	}

	public class Expression1100Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression1100");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression900ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_1100TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression900ParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression1100 returns Expression:
		//
		//	Expression900 (ops+=EXPRESSION_1100 exps+=Expression900)*;
		public ParserRule getRule() { return rule; }

		//Expression900 (ops+=EXPRESSION_1100 exps+=Expression900)*
		public Group getGroup() { return cGroup; }

		//Expression900
		public RuleCall getExpression900ParserRuleCall_0() { return cExpression900ParserRuleCall_0; }

		//(ops+=EXPRESSION_1100 exps+=Expression900)*
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_1100
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_1100
		public RuleCall getOpsEXPRESSION_1100TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_1100TerminalRuleCall_1_0_0; }

		//exps+=Expression900
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression900
		public RuleCall getExpsExpression900ParserRuleCall_1_1_0() { return cExpsExpression900ParserRuleCall_1_1_0; }
	}

	public class Expression900Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression900");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_900TerminalRuleCall_0_0 = (RuleCall)cOpsAssignment_0.eContents().get(0);
		private final Assignment cExpsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpsExpression700ParserRuleCall_1_0 = (RuleCall)cExpsAssignment_1.eContents().get(0);
		
		//Expression900 returns Expression:
		//
		//	ops+=EXPRESSION_900? exps+=Expression700;
		public ParserRule getRule() { return rule; }

		//ops+=EXPRESSION_900? exps+=Expression700
		public Group getGroup() { return cGroup; }

		//ops+=EXPRESSION_900?
		public Assignment getOpsAssignment_0() { return cOpsAssignment_0; }

		//EXPRESSION_900
		public RuleCall getOpsEXPRESSION_900TerminalRuleCall_0_0() { return cOpsEXPRESSION_900TerminalRuleCall_0_0; }

		//exps+=Expression700
		public Assignment getExpsAssignment_1() { return cExpsAssignment_1; }

		//Expression700
		public RuleCall getExpsExpression700ParserRuleCall_1_0() { return cExpsExpression700ParserRuleCall_1_0; }
	}

	public class Expression700Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression700");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression500ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_700TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression500ParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression700 returns Expression:
		//
		//	Expression500 (ops+=EXPRESSION_700 exps+=Expression500)?;
		public ParserRule getRule() { return rule; }

		//Expression500 (ops+=EXPRESSION_700 exps+=Expression500)?
		public Group getGroup() { return cGroup; }

		//Expression500
		public RuleCall getExpression500ParserRuleCall_0() { return cExpression500ParserRuleCall_0; }

		//(ops+=EXPRESSION_700 exps+=Expression500)?
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_700
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_700
		public RuleCall getOpsEXPRESSION_700TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_700TerminalRuleCall_1_0_0; }

		//exps+=Expression500
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression500
		public RuleCall getExpsExpression500ParserRuleCall_1_1_0() { return cExpsExpression500ParserRuleCall_1_1_0; }
	}

	public class Expression500Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression500");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression400ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_500TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression400ParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression500 returns Expression:
		//
		//	Expression400 (ops+=EXPRESSION_500 exps+=Expression400)*;
		public ParserRule getRule() { return rule; }

		//Expression400 (ops+=EXPRESSION_500 exps+=Expression400)*
		public Group getGroup() { return cGroup; }

		//Expression400
		public RuleCall getExpression400ParserRuleCall_0() { return cExpression400ParserRuleCall_0; }

		//(ops+=EXPRESSION_500 exps+=Expression400)*
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_500
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_500
		public RuleCall getOpsEXPRESSION_500TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_500TerminalRuleCall_1_0_0; }

		//exps+=Expression400
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression400
		public RuleCall getExpsExpression400ParserRuleCall_1_1_0() { return cExpsExpression400ParserRuleCall_1_1_0; }
	}

	public class Expression400Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression400");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression200ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_400TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression200ParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression400 returns Expression:
		//
		//	Expression200 (ops+=EXPRESSION_400 exps+=Expression200)*;
		public ParserRule getRule() { return rule; }

		//Expression200 (ops+=EXPRESSION_400 exps+=Expression200)*
		public Group getGroup() { return cGroup; }

		//Expression200
		public RuleCall getExpression200ParserRuleCall_0() { return cExpression200ParserRuleCall_0; }

		//(ops+=EXPRESSION_400 exps+=Expression200)*
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_400
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_400
		public RuleCall getOpsEXPRESSION_400TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_400TerminalRuleCall_1_0_0; }

		//exps+=Expression200
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression200
		public RuleCall getExpsExpression200ParserRuleCall_1_1_0() { return cExpsExpression200ParserRuleCall_1_1_0; }
	}

	public class Expression200Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression200");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression0ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_200TerminalRuleCall_1_0_0 = (RuleCall)cOpsAssignment_1_0.eContents().get(0);
		private final Assignment cExpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpsExpression0ParserRuleCall_1_1_0 = (RuleCall)cExpsAssignment_1_1.eContents().get(0);
		
		//Expression200 returns Expression:
		//
		//	Expression0 (ops+=EXPRESSION_200 exps+=Expression0)*;
		public ParserRule getRule() { return rule; }

		//Expression0 (ops+=EXPRESSION_200 exps+=Expression0)*
		public Group getGroup() { return cGroup; }

		//Expression0
		public RuleCall getExpression0ParserRuleCall_0() { return cExpression0ParserRuleCall_0; }

		//(ops+=EXPRESSION_200 exps+=Expression0)*
		public Group getGroup_1() { return cGroup_1; }

		//ops+=EXPRESSION_200
		public Assignment getOpsAssignment_1_0() { return cOpsAssignment_1_0; }

		//EXPRESSION_200
		public RuleCall getOpsEXPRESSION_200TerminalRuleCall_1_0_0() { return cOpsEXPRESSION_200TerminalRuleCall_1_0_0; }

		//exps+=Expression0
		public Assignment getExpsAssignment_1_1() { return cExpsAssignment_1_1; }

		//Expression0
		public RuleCall getExpsExpression0ParserRuleCall_1_1_0() { return cExpsExpression0ParserRuleCall_1_1_0; }
	}

	public class Expression0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression0");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOpsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cOpsAlternatives_0_0_0 = (Alternatives)cOpsAssignment_0_0.eContents().get(0);
		private final RuleCall cOpsATOMTerminalRuleCall_0_0_0_0 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cOpsEXPRESSION_1100TerminalRuleCall_0_0_0_1 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(1);
		private final RuleCall cOpsEXPRESSION_900TerminalRuleCall_0_0_0_2 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(2);
		private final RuleCall cOpsEXPRESSION_700TerminalRuleCall_0_0_0_3 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(3);
		private final RuleCall cOpsEXPRESSION_500TerminalRuleCall_0_0_0_4 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(4);
		private final RuleCall cOpsEXPRESSION_400TerminalRuleCall_0_0_0_5 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(5);
		private final RuleCall cOpsEXPRESSION_200TerminalRuleCall_0_0_0_6 = (RuleCall)cOpsAlternatives_0_0_0.eContents().get(6);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cComplexAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cComplexLeftParenthesisKeyword_0_1_0_0 = (Keyword)cComplexAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Assignment cExpsAssignment_0_1_1_0 = (Assignment)cGroup_0_1_1.eContents().get(0);
		private final RuleCall cExpsExpressionINFParserRuleCall_0_1_1_0_0 = (RuleCall)cExpsAssignment_0_1_1_0.eContents().get(0);
		private final Group cGroup_0_1_1_1 = (Group)cGroup_0_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_1_0 = (Keyword)cGroup_0_1_1_1.eContents().get(0);
		private final Assignment cExpsAssignment_0_1_1_1_1 = (Assignment)cGroup_0_1_1_1.eContents().get(1);
		private final RuleCall cExpsExpressionINFParserRuleCall_0_1_1_1_1_0 = (RuleCall)cExpsAssignment_0_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNUMBERTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cVariableAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cVariableVARIABLETerminalRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cListAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cListLeftSquareBracketKeyword_4_0_0 = (Keyword)cListAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cHeadAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cHeadExpressionINFParserRuleCall_4_1_0_0 = (RuleCall)cHeadAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cHeadAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cHeadExpressionINFParserRuleCall_4_1_1_1_0 = (RuleCall)cHeadAssignment_4_1_1_1.eContents().get(0);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Keyword cVerticalLineKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cTailAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cTailExpressionINFParserRuleCall_4_1_2_1_0 = (RuleCall)cTailAssignment_4_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cListAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cListFullStopKeyword_5_0_0 = (Keyword)cListAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cHeadAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cHeadExpressionINFParserRuleCall_5_2_0 = (RuleCall)cHeadAssignment_5_2.eContents().get(0);
		private final Keyword cCommaKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cTailAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cTailExpressionINFParserRuleCall_5_4_0 = (RuleCall)cTailAssignment_5_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExpsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpsExpressionINFParserRuleCall_6_1_0 = (RuleCall)cExpsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//Expression0 returns Expression:
		//
		//	ops+=(ATOM | EXPRESSION_1100 | EXPRESSION_900 | EXPRESSION_700 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200)
		//
		//	(complex?="(" (exps+=ExpressionINF ("," exps+=ExpressionINF)*)? ")")? | number=NUMBER | string=STRING |
		//
		//	variable=VARIABLE | list?="[" (head+=ExpressionINF ("," head+=ExpressionINF)* ("|" tail=ExpressionINF)?)? "]" |
		//
		//	list?="." "(" head+=ExpressionINF "," tail=ExpressionINF ")" | "(" exps+=ExpressionINF ")";
		public ParserRule getRule() { return rule; }

		//ops+=(ATOM | EXPRESSION_1100 | EXPRESSION_900 | EXPRESSION_700 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200)
		//
		//(complex?="(" (exps+=ExpressionINF ("," exps+=ExpressionINF)*)? ")")? | number=NUMBER | string=STRING |
		//
		//variable=VARIABLE | list?="[" (head+=ExpressionINF ("," head+=ExpressionINF)* ("|" tail=ExpressionINF)?)? "]" |
		//
		//list?="." "(" head+=ExpressionINF "," tail=ExpressionINF ")" | "(" exps+=ExpressionINF ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ops+=(ATOM | EXPRESSION_1100 | EXPRESSION_900 | EXPRESSION_700 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200)
		//
		//(complex?="(" (exps+=ExpressionINF ("," exps+=ExpressionINF)*)? ")")?
		public Group getGroup_0() { return cGroup_0; }

		//ops+=(ATOM | EXPRESSION_1100 | EXPRESSION_900 | EXPRESSION_700 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200)
		public Assignment getOpsAssignment_0_0() { return cOpsAssignment_0_0; }

		//ATOM | EXPRESSION_1100 | EXPRESSION_900 | EXPRESSION_700 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200
		public Alternatives getOpsAlternatives_0_0_0() { return cOpsAlternatives_0_0_0; }

		//ATOM
		public RuleCall getOpsATOMTerminalRuleCall_0_0_0_0() { return cOpsATOMTerminalRuleCall_0_0_0_0; }

		//EXPRESSION_1100
		public RuleCall getOpsEXPRESSION_1100TerminalRuleCall_0_0_0_1() { return cOpsEXPRESSION_1100TerminalRuleCall_0_0_0_1; }

		//EXPRESSION_900
		public RuleCall getOpsEXPRESSION_900TerminalRuleCall_0_0_0_2() { return cOpsEXPRESSION_900TerminalRuleCall_0_0_0_2; }

		//EXPRESSION_700
		public RuleCall getOpsEXPRESSION_700TerminalRuleCall_0_0_0_3() { return cOpsEXPRESSION_700TerminalRuleCall_0_0_0_3; }

		//EXPRESSION_500
		public RuleCall getOpsEXPRESSION_500TerminalRuleCall_0_0_0_4() { return cOpsEXPRESSION_500TerminalRuleCall_0_0_0_4; }

		//EXPRESSION_400
		public RuleCall getOpsEXPRESSION_400TerminalRuleCall_0_0_0_5() { return cOpsEXPRESSION_400TerminalRuleCall_0_0_0_5; }

		//EXPRESSION_200
		public RuleCall getOpsEXPRESSION_200TerminalRuleCall_0_0_0_6() { return cOpsEXPRESSION_200TerminalRuleCall_0_0_0_6; }

		//(complex?="(" (exps+=ExpressionINF ("," exps+=ExpressionINF)*)? ")")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//complex?="("
		public Assignment getComplexAssignment_0_1_0() { return cComplexAssignment_0_1_0; }

		//"("
		public Keyword getComplexLeftParenthesisKeyword_0_1_0_0() { return cComplexLeftParenthesisKeyword_0_1_0_0; }

		//(exps+=ExpressionINF ("," exps+=ExpressionINF)*)?
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//exps+=ExpressionINF
		public Assignment getExpsAssignment_0_1_1_0() { return cExpsAssignment_0_1_1_0; }

		//ExpressionINF
		public RuleCall getExpsExpressionINFParserRuleCall_0_1_1_0_0() { return cExpsExpressionINFParserRuleCall_0_1_1_0_0; }

		//("," exps+=ExpressionINF)*
		public Group getGroup_0_1_1_1() { return cGroup_0_1_1_1; }

		//","
		public Keyword getCommaKeyword_0_1_1_1_0() { return cCommaKeyword_0_1_1_1_0; }

		//exps+=ExpressionINF
		public Assignment getExpsAssignment_0_1_1_1_1() { return cExpsAssignment_0_1_1_1_1; }

		//ExpressionINF
		public RuleCall getExpsExpressionINFParserRuleCall_0_1_1_1_1_0() { return cExpsExpressionINFParserRuleCall_0_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }

		//number=NUMBER
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }

		//NUMBER
		public RuleCall getNumberNUMBERTerminalRuleCall_1_0() { return cNumberNUMBERTerminalRuleCall_1_0; }

		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }

		//variable=VARIABLE
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_3_0() { return cVariableVARIABLETerminalRuleCall_3_0; }

		//list?="[" (head+=ExpressionINF ("," head+=ExpressionINF)* ("|" tail=ExpressionINF)?)? "]"
		public Group getGroup_4() { return cGroup_4; }

		//list?="["
		public Assignment getListAssignment_4_0() { return cListAssignment_4_0; }

		//"["
		public Keyword getListLeftSquareBracketKeyword_4_0_0() { return cListLeftSquareBracketKeyword_4_0_0; }

		//(head+=ExpressionINF ("," head+=ExpressionINF)* ("|" tail=ExpressionINF)?)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//head+=ExpressionINF
		public Assignment getHeadAssignment_4_1_0() { return cHeadAssignment_4_1_0; }

		//ExpressionINF
		public RuleCall getHeadExpressionINFParserRuleCall_4_1_0_0() { return cHeadExpressionINFParserRuleCall_4_1_0_0; }

		//("," head+=ExpressionINF)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//head+=ExpressionINF
		public Assignment getHeadAssignment_4_1_1_1() { return cHeadAssignment_4_1_1_1; }

		//ExpressionINF
		public RuleCall getHeadExpressionINFParserRuleCall_4_1_1_1_0() { return cHeadExpressionINFParserRuleCall_4_1_1_1_0; }

		//("|" tail=ExpressionINF)?
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }

		//"|"
		public Keyword getVerticalLineKeyword_4_1_2_0() { return cVerticalLineKeyword_4_1_2_0; }

		//tail=ExpressionINF
		public Assignment getTailAssignment_4_1_2_1() { return cTailAssignment_4_1_2_1; }

		//ExpressionINF
		public RuleCall getTailExpressionINFParserRuleCall_4_1_2_1_0() { return cTailExpressionINFParserRuleCall_4_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }

		//list?="." "(" head+=ExpressionINF "," tail=ExpressionINF ")"
		public Group getGroup_5() { return cGroup_5; }

		//list?="."
		public Assignment getListAssignment_5_0() { return cListAssignment_5_0; }

		//"."
		public Keyword getListFullStopKeyword_5_0_0() { return cListFullStopKeyword_5_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//head+=ExpressionINF
		public Assignment getHeadAssignment_5_2() { return cHeadAssignment_5_2; }

		//ExpressionINF
		public RuleCall getHeadExpressionINFParserRuleCall_5_2_0() { return cHeadExpressionINFParserRuleCall_5_2_0; }

		//","
		public Keyword getCommaKeyword_5_3() { return cCommaKeyword_5_3; }

		//tail=ExpressionINF
		public Assignment getTailAssignment_5_4() { return cTailAssignment_5_4; }

		//ExpressionINF
		public RuleCall getTailExpressionINFParserRuleCall_5_4_0() { return cTailExpressionINFParserRuleCall_5_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_5() { return cRightParenthesisKeyword_5_5; }

		//"(" exps+=ExpressionINF ")"
		public Group getGroup_6() { return cGroup_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//exps+=ExpressionINF
		public Assignment getExpsAssignment_6_1() { return cExpsAssignment_6_1; }

		//ExpressionINF
		public RuleCall getExpsExpressionINFParserRuleCall_6_1_0() { return cExpsExpressionINFParserRuleCall_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}
	
	
	private ProgramElements pProgram;
	private ClauseElements pClause;
	private QueryElements pQuery;
	private ExpressionINFElements pExpressionINF;
	private Expression1100Elements pExpression1100;
	private TerminalRule tEXPRESSION_1100;
	private Expression900Elements pExpression900;
	private TerminalRule tEXPRESSION_900;
	private Expression700Elements pExpression700;
	private TerminalRule tEXPRESSION_700;
	private Expression500Elements pExpression500;
	private TerminalRule tEXPRESSION_500;
	private Expression400Elements pExpression400;
	private TerminalRule tEXPRESSION_400;
	private Expression200Elements pExpression200;
	private TerminalRule tEXPRESSION_200;
	private Expression0Elements pExpression0;
	private TerminalRule tNUMBER;
	private TerminalRule tATOM;
	private TerminalRule tVARIABLE;
	private TerminalRule tSTRING;
	private TerminalRule tWHITESPACE;
	private TerminalRule tSINGLE_LINE_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public PrologGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.archstudio.prolog.xtext.Prolog".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Program:
	//
	//	clauses+=Clause* query=Query?;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Clause:
	//
	//	predicates+=ExpressionINF (":-" predicates+=ExpressionINF ("," predicates+=ExpressionINF)*)? ".";
	public ClauseElements getClauseAccess() {
		return (pClause != null) ? pClause : (pClause = new ClauseElements());
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}

	//Query:
	//
	//	"?-" predicates+=ExpressionINF ("," predicates+=ExpressionINF)* ".";
	public QueryElements getQueryAccess() {
		return (pQuery != null) ? pQuery : (pQuery = new QueryElements());
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//ExpressionINF returns Expression:
	//
	//	Expression1100;
	public ExpressionINFElements getExpressionINFAccess() {
		return (pExpressionINF != null) ? pExpressionINF : (pExpressionINF = new ExpressionINFElements());
	}
	
	public ParserRule getExpressionINFRule() {
		return getExpressionINFAccess().getRule();
	}

	//Expression1100 returns Expression:
	//
	//	Expression900 (ops+=EXPRESSION_1100 exps+=Expression900)*;
	public Expression1100Elements getExpression1100Access() {
		return (pExpression1100 != null) ? pExpression1100 : (pExpression1100 = new Expression1100Elements());
	}
	
	public ParserRule getExpression1100Rule() {
		return getExpression1100Access().getRule();
	}

	//terminal EXPRESSION_1100:
	//
	//	";";
	public TerminalRule getEXPRESSION_1100Rule() {
		return (tEXPRESSION_1100 != null) ? tEXPRESSION_1100 : (tEXPRESSION_1100 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_1100"));
	} 

	//Expression900 returns Expression:
	//
	//	ops+=EXPRESSION_900? exps+=Expression700;
	public Expression900Elements getExpression900Access() {
		return (pExpression900 != null) ? pExpression900 : (pExpression900 = new Expression900Elements());
	}
	
	public ParserRule getExpression900Rule() {
		return getExpression900Access().getRule();
	}

	//terminal EXPRESSION_900:
	//
	//	"\\+" | "not";
	public TerminalRule getEXPRESSION_900Rule() {
		return (tEXPRESSION_900 != null) ? tEXPRESSION_900 : (tEXPRESSION_900 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_900"));
	} 

	//Expression700 returns Expression:
	//
	//	Expression500 (ops+=EXPRESSION_700 exps+=Expression500)?;
	public Expression700Elements getExpression700Access() {
		return (pExpression700 != null) ? pExpression700 : (pExpression700 = new Expression700Elements());
	}
	
	public ParserRule getExpression700Rule() {
		return getExpression700Access().getRule();
	}

	//terminal EXPRESSION_700:
	//
	//	"<" | "=" | "=.." | "=@=" | "=:=" | "=<" | "==" | "=\\=" | ">" | ">=" | "@<" | "@=<" | "@>" | "@>=" | "\\=" | "\\=="
	//
	//	| "is";
	public TerminalRule getEXPRESSION_700Rule() {
		return (tEXPRESSION_700 != null) ? tEXPRESSION_700 : (tEXPRESSION_700 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_700"));
	} 

	//Expression500 returns Expression:
	//
	//	Expression400 (ops+=EXPRESSION_500 exps+=Expression400)*;
	public Expression500Elements getExpression500Access() {
		return (pExpression500 != null) ? pExpression500 : (pExpression500 = new Expression500Elements());
	}
	
	public ParserRule getExpression500Rule() {
		return getExpression500Access().getRule();
	}

	//terminal EXPRESSION_500:
	//
	//	"+" | "-" | "/\\" | "\\/" | "xor";
	public TerminalRule getEXPRESSION_500Rule() {
		return (tEXPRESSION_500 != null) ? tEXPRESSION_500 : (tEXPRESSION_500 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_500"));
	} 

	//Expression400 returns Expression:
	//
	//	Expression200 (ops+=EXPRESSION_400 exps+=Expression200)*;
	public Expression400Elements getExpression400Access() {
		return (pExpression400 != null) ? pExpression400 : (pExpression400 = new Expression400Elements());
	}
	
	public ParserRule getExpression400Rule() {
		return getExpression400Access().getRule();
	}

	//terminal EXPRESSION_400:
	//
	//	"*" | "/" | "//" | "rdiv" | "<<" | ">>" | "mod" | "rem";
	public TerminalRule getEXPRESSION_400Rule() {
		return (tEXPRESSION_400 != null) ? tEXPRESSION_400 : (tEXPRESSION_400 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_400"));
	} 

	//Expression200 returns Expression:
	//
	//	Expression0 (ops+=EXPRESSION_200 exps+=Expression0)*;
	public Expression200Elements getExpression200Access() {
		return (pExpression200 != null) ? pExpression200 : (pExpression200 = new Expression200Elements());
	}
	
	public ParserRule getExpression200Rule() {
		return getExpression200Access().getRule();
	}

	//terminal EXPRESSION_200:
	//
	//	"**" | "^";
	public TerminalRule getEXPRESSION_200Rule() {
		return (tEXPRESSION_200 != null) ? tEXPRESSION_200 : (tEXPRESSION_200 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_200"));
	} 

	//Expression0 returns Expression:
	//
	//	ops+=(ATOM | EXPRESSION_1100 | EXPRESSION_900 | EXPRESSION_700 | EXPRESSION_500 | EXPRESSION_400 | EXPRESSION_200)
	//
	//	(complex?="(" (exps+=ExpressionINF ("," exps+=ExpressionINF)*)? ")")? | number=NUMBER | string=STRING |
	//
	//	variable=VARIABLE | list?="[" (head+=ExpressionINF ("," head+=ExpressionINF)* ("|" tail=ExpressionINF)?)? "]" |
	//
	//	list?="." "(" head+=ExpressionINF "," tail=ExpressionINF ")" | "(" exps+=ExpressionINF ")";
	public Expression0Elements getExpression0Access() {
		return (pExpression0 != null) ? pExpression0 : (pExpression0 = new Expression0Elements());
	}
	
	public ParserRule getExpression0Rule() {
		return getExpression0Access().getRule();
	}

	//terminal NUMBER:
	//
	//	"-"? "0".."9"+;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal ATOM:
	//
	//	"a".."z" ("0".."9" | "a".."z" | "A".."Z" | "_")*;
	public TerminalRule getATOMRule() {
		return (tATOM != null) ? tATOM : (tATOM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATOM"));
	} 

	//terminal VARIABLE:
	//
	//	("A".."Z" | "_") ("0".."9" | "a".."z" | "A".."Z" | "_")*;
	public TerminalRule getVARIABLERule() {
		return (tVARIABLE != null) ? tVARIABLE : (tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VARIABLE"));
	} 

	//terminal STRING:
	//
	//	"\'" ("0".."9" | "a".."z" | "A".."Z" | "_" | "+" | "-" | "*" | "/" | "\\" | "^" | "~" | ":" | "." | "?" | "@" | "#" |
	//
	//	"$" | "&" | " ")* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal WHITESPACE:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWHITESPACERule() {
		return (tWHITESPACE != null) ? tWHITESPACE : (tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHITESPACE"));
	} 

	//terminal SINGLE_LINE_COMMENT:
	//
	//	"%" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSINGLE_LINE_COMMENTRule() {
		return (tSINGLE_LINE_COMMENT != null) ? tSINGLE_LINE_COMMENT : (tSINGLE_LINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGLE_LINE_COMMENT"));
	} 
}
