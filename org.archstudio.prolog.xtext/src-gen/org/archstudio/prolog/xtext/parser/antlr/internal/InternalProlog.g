/*
* generated by Xtext
*/
grammar InternalProlog;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.archstudio.prolog.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.archstudio.prolog.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.archstudio.prolog.xtext.services.PrologGrammarAccess;

}

@parser::members {

 	private PrologGrammarAccess grammarAccess;
 	
    public InternalPrologParser(TokenStream input, PrologGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected PrologGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getClausesSingleClauseParserRuleCall_0_0()); 
	    }
		lv_clauses_0_0=ruleSingleClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"clauses",
        		lv_clauses_0_0, 
        		"SingleClause");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getQueryQueryParserRuleCall_1_0()); 
	    }
		lv_query_1_0=ruleQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_1_0, 
        		"Query");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSingleClause
entryRuleSingleClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleClauseRule()); }
	 iv_ruleSingleClause=ruleSingleClause 
	 { $current=$iv_ruleSingleClause.current; } 
	 EOF 
;

// Rule SingleClause
ruleSingleClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSingleClauseAccess().getPredicatesPredicateParserRuleCall_0_0()); 
	    }
		lv_predicates_0_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleClauseRule());
	        }
       		add(
       			$current, 
       			"predicates",
        		lv_predicates_0_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=':-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSingleClauseAccess().getColonHyphenMinusKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleClauseAccess().getPredicatesPredicateParserRuleCall_1_1_0()); 
	    }
		lv_predicates_2_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleClauseRule());
	        }
       		add(
       			$current, 
       			"predicates",
        		lv_predicates_2_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSingleClauseAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleClauseAccess().getPredicatesPredicateParserRuleCall_1_2_1_0()); 
	    }
		lv_predicates_4_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleClauseRule());
	        }
       		add(
       			$current, 
       			"predicates",
        		lv_predicates_4_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSingleClauseAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	 iv_ruleQuery=ruleQuery 
	 { $current=$iv_ruleQuery.current; } 
	 EOF 
;

// Rule Query
ruleQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='?-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQueryAccess().getQuestionMarkHyphenMinusKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryAccess().getPredicatesPredicateParserRuleCall_1_0()); 
	    }
		lv_predicates_1_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryRule());
	        }
       		add(
       			$current, 
       			"predicates",
        		lv_predicates_1_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQueryAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryAccess().getPredicatesPredicateParserRuleCall_2_1_0()); 
	    }
		lv_predicates_3_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryRule());
	        }
       		add(
       			$current, 
       			"predicates",
        		lv_predicates_3_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQueryAccess().getFullStopKeyword_3());
    }
)
;





// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	 iv_rulePredicate=rulePredicate 
	 { $current=$iv_rulePredicate.current; } 
	 EOF 
;

// Rule Predicate
rulePredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getFunctorSingleTermParserRuleCall_0_0_0()); 
	    }
		lv_functor_0_0=ruleSingleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		set(
       			$current, 
       			"functor",
        		lv_functor_0_0, 
        		"SingleTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPredicateAccess().getLeftParenthesisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getTermsSingleTermParserRuleCall_0_2_0()); 
	    }
		lv_terms_2_0=ruleSingleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_2_0, 
        		"SingleTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPredicateAccess().getCommaKeyword_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getTermsSingleTermParserRuleCall_0_3_1_0()); 
	    }
		lv_terms_4_0=ruleSingleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_4_0, 
        		"SingleTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPredicateAccess().getRightParenthesisKeyword_0_4());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getTermsSingleTermParserRuleCall_1_0_0()); 
	    }
		lv_terms_6_0=ruleSingleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_6_0, 
        		"SingleTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getFunctorSingleTermParserRuleCall_1_1_0()); 
	    }
		lv_functor_7_0=ruleSingleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		set(
       			$current, 
       			"functor",
        		lv_functor_7_0, 
        		"SingleTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getTermsSingleTermParserRuleCall_1_2_0()); 
	    }
		lv_terms_8_0=ruleSingleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_8_0, 
        		"SingleTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleSingleTerm
entryRuleSingleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleTermRule()); }
	 iv_ruleSingleTerm=ruleSingleTerm 
	 { $current=$iv_ruleSingleTerm.current; } 
	 EOF 
;

// Rule SingleTerm
ruleSingleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_numeral_0_0=RULE_NUMERAL
		{
			newLeafNode(lv_numeral_0_0, grammarAccess.getSingleTermAccess().getNumeralNUMERALTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numeral",
        		lv_numeral_0_0, 
        		"NUMERAL");
	    }

)
)
    |(
(
		lv_atom_1_0=RULE_ATOM
		{
			newLeafNode(lv_atom_1_0, grammarAccess.getSingleTermAccess().getAtomATOMTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"atom",
        		lv_atom_1_0, 
        		"ATOM");
	    }

)
)
    |(
(
		lv_variable_2_0=RULE_VARIABLE
		{
			newLeafNode(lv_variable_2_0, grammarAccess.getSingleTermAccess().getVariableVARIABLETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"VARIABLE");
	    }

)
)
    |(
(
		lv_string_3_0=RULE_STRING
		{
			newLeafNode(lv_string_3_0, grammarAccess.getSingleTermAccess().getStringSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_3_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_operator_4_0=RULE_OPERATOR
		{
			newLeafNode(lv_operator_4_0, grammarAccess.getSingleTermAccess().getOperatorOPERATORTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_4_0, 
        		"OPERATOR");
	    }

)
))
;





RULE_OPERATOR : ('=='|'\\=');

RULE_ATOM : RULE_LOWER_CASE_LETTER (RULE_DIGIT|RULE_LOWER_CASE_LETTER|RULE_UPPER_CASE_LETTER)*;

RULE_VARIABLE : RULE_UPPER_CASE_LETTER (RULE_DIGIT|RULE_LOWER_CASE_LETTER|RULE_UPPER_CASE_LETTER)*;

RULE_NUMERAL : '-'? RULE_DIGIT+;

RULE_STRING : '\'' RULE_CHARACTER* '\'';

RULE_DIGIT : '0'..'9';

RULE_LOWER_CASE_LETTER : 'a'..'z';

RULE_UPPER_CASE_LETTER : ('A'..'Z'|'_');

RULE_SPECIAL : ('+'|'-'|'*'|'/'|'\\'|'^'|'~'|':'|'.'|'?'|'@'|'#'|'$'|'&');

RULE_CHARACTER : (RULE_LOWER_CASE_LETTER|RULE_UPPER_CASE_LETTER|RULE_DIGIT|RULE_SPECIAL);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


